//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: spark/connect/ml.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Command for ML
type MlCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//
	//	*MlCommand_Fit_
	//	*MlCommand_Fetch
	//	*MlCommand_Delete_
	//	*MlCommand_Write_
	//	*MlCommand_Read_
	//	*MlCommand_Evaluate_
	//	*MlCommand_CleanCache_
	//	*MlCommand_GetCacheInfo_
	Command isMlCommand_Command `protobuf_oneof:"command"`
}

func (x *MlCommand) Reset() {
	*x = MlCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlCommand) ProtoMessage() {}

func (x *MlCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlCommand.ProtoReflect.Descriptor instead.
func (*MlCommand) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_proto_rawDescGZIP(), []int{0}
}

func (m *MlCommand) GetCommand() isMlCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *MlCommand) GetFit() *MlCommand_Fit {
	if x, ok := x.GetCommand().(*MlCommand_Fit_); ok {
		return x.Fit
	}
	return nil
}

func (x *MlCommand) GetFetch() *Fetch {
	if x, ok := x.GetCommand().(*MlCommand_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (x *MlCommand) GetDelete() *MlCommand_Delete {
	if x, ok := x.GetCommand().(*MlCommand_Delete_); ok {
		return x.Delete
	}
	return nil
}

func (x *MlCommand) GetWrite() *MlCommand_Write {
	if x, ok := x.GetCommand().(*MlCommand_Write_); ok {
		return x.Write
	}
	return nil
}

func (x *MlCommand) GetRead() *MlCommand_Read {
	if x, ok := x.GetCommand().(*MlCommand_Read_); ok {
		return x.Read
	}
	return nil
}

func (x *MlCommand) GetEvaluate() *MlCommand_Evaluate {
	if x, ok := x.GetCommand().(*MlCommand_Evaluate_); ok {
		return x.Evaluate
	}
	return nil
}

func (x *MlCommand) GetCleanCache() *MlCommand_CleanCache {
	if x, ok := x.GetCommand().(*MlCommand_CleanCache_); ok {
		return x.CleanCache
	}
	return nil
}

func (x *MlCommand) GetGetCacheInfo() *MlCommand_GetCacheInfo {
	if x, ok := x.GetCommand().(*MlCommand_GetCacheInfo_); ok {
		return x.GetCacheInfo
	}
	return nil
}

type isMlCommand_Command interface {
	isMlCommand_Command()
}

type MlCommand_Fit_ struct {
	Fit *MlCommand_Fit `protobuf:"bytes,1,opt,name=fit,proto3,oneof"`
}

type MlCommand_Fetch struct {
	Fetch *Fetch `protobuf:"bytes,2,opt,name=fetch,proto3,oneof"`
}

type MlCommand_Delete_ struct {
	Delete *MlCommand_Delete `protobuf:"bytes,3,opt,name=delete,proto3,oneof"`
}

type MlCommand_Write_ struct {
	Write *MlCommand_Write `protobuf:"bytes,4,opt,name=write,proto3,oneof"`
}

type MlCommand_Read_ struct {
	Read *MlCommand_Read `protobuf:"bytes,5,opt,name=read,proto3,oneof"`
}

type MlCommand_Evaluate_ struct {
	Evaluate *MlCommand_Evaluate `protobuf:"bytes,6,opt,name=evaluate,proto3,oneof"`
}

type MlCommand_CleanCache_ struct {
	CleanCache *MlCommand_CleanCache `protobuf:"bytes,7,opt,name=clean_cache,json=cleanCache,proto3,oneof"`
}

type MlCommand_GetCacheInfo_ struct {
	GetCacheInfo *MlCommand_GetCacheInfo `protobuf:"bytes,8,opt,name=get_cache_info,json=getCacheInfo,proto3,oneof"`
}

func (*MlCommand_Fit_) isMlCommand_Command() {}

func (*MlCommand_Fetch) isMlCommand_Command() {}

func (*MlCommand_Delete_) isMlCommand_Command() {}

func (*MlCommand_Write_) isMlCommand_Command() {}

func (*MlCommand_Read_) isMlCommand_Command() {}

func (*MlCommand_Evaluate_) isMlCommand_Command() {}

func (*MlCommand_CleanCache_) isMlCommand_Command() {}

func (*MlCommand_GetCacheInfo_) isMlCommand_Command() {}

// The result of MlCommand
type MlCommandResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResultType:
	//
	//	*MlCommandResult_Param
	//	*MlCommandResult_Summary
	//	*MlCommandResult_OperatorInfo
	ResultType isMlCommandResult_ResultType `protobuf_oneof:"result_type"`
}

func (x *MlCommandResult) Reset() {
	*x = MlCommandResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlCommandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlCommandResult) ProtoMessage() {}

func (x *MlCommandResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlCommandResult.ProtoReflect.Descriptor instead.
func (*MlCommandResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_proto_rawDescGZIP(), []int{1}
}

func (m *MlCommandResult) GetResultType() isMlCommandResult_ResultType {
	if m != nil {
		return m.ResultType
	}
	return nil
}

func (x *MlCommandResult) GetParam() *Expression_Literal {
	if x, ok := x.GetResultType().(*MlCommandResult_Param); ok {
		return x.Param
	}
	return nil
}

func (x *MlCommandResult) GetSummary() string {
	if x, ok := x.GetResultType().(*MlCommandResult_Summary); ok {
		return x.Summary
	}
	return ""
}

func (x *MlCommandResult) GetOperatorInfo() *MlCommandResult_MlOperatorInfo {
	if x, ok := x.GetResultType().(*MlCommandResult_OperatorInfo); ok {
		return x.OperatorInfo
	}
	return nil
}

type isMlCommandResult_ResultType interface {
	isMlCommandResult_ResultType()
}

type MlCommandResult_Param struct {
	// The result of the attribute
	Param *Expression_Literal `protobuf:"bytes,1,opt,name=param,proto3,oneof"`
}

type MlCommandResult_Summary struct {
	// Evaluate a Dataset in a model and return the cached ID of summary
	Summary string `protobuf:"bytes,2,opt,name=summary,proto3,oneof"`
}

type MlCommandResult_OperatorInfo struct {
	// Operator information
	OperatorInfo *MlCommandResult_MlOperatorInfo `protobuf:"bytes,3,opt,name=operator_info,json=operatorInfo,proto3,oneof"`
}

func (*MlCommandResult_Param) isMlCommandResult_ResultType() {}

func (*MlCommandResult_Summary) isMlCommandResult_ResultType() {}

func (*MlCommandResult_OperatorInfo) isMlCommandResult_ResultType() {}

// Command for estimator.fit(dataset)
type MlCommand_Fit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Estimator information (its type should be OPERATOR_TYPE_ESTIMATOR)
	Estimator *MlOperator `protobuf:"bytes,1,opt,name=estimator,proto3" json:"estimator,omitempty"`
	// (Optional) parameters of the Estimator
	Params *MlParams `protobuf:"bytes,2,opt,name=params,proto3,oneof" json:"params,omitempty"`
	// (Required) the training dataset
	Dataset *Relation `protobuf:"bytes,3,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *MlCommand_Fit) Reset() {
	*x = MlCommand_Fit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlCommand_Fit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlCommand_Fit) ProtoMessage() {}

func (x *MlCommand_Fit) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlCommand_Fit.ProtoReflect.Descriptor instead.
func (*MlCommand_Fit) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MlCommand_Fit) GetEstimator() *MlOperator {
	if x != nil {
		return x.Estimator
	}
	return nil
}

func (x *MlCommand_Fit) GetParams() *MlParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *MlCommand_Fit) GetDataset() *Relation {
	if x != nil {
		return x.Dataset
	}
	return nil
}

// Command to delete the cached objects which could be a model
// or summary evaluated by a model
type MlCommand_Delete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjRefs []*ObjectRef `protobuf:"bytes,1,rep,name=obj_refs,json=objRefs,proto3" json:"obj_refs,omitempty"`
}

func (x *MlCommand_Delete) Reset() {
	*x = MlCommand_Delete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlCommand_Delete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlCommand_Delete) ProtoMessage() {}

func (x *MlCommand_Delete) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlCommand_Delete.ProtoReflect.Descriptor instead.
func (*MlCommand_Delete) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MlCommand_Delete) GetObjRefs() []*ObjectRef {
	if x != nil {
		return x.ObjRefs
	}
	return nil
}

// Force to clean up all the ML cached objects
type MlCommand_CleanCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MlCommand_CleanCache) Reset() {
	*x = MlCommand_CleanCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlCommand_CleanCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlCommand_CleanCache) ProtoMessage() {}

func (x *MlCommand_CleanCache) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlCommand_CleanCache.ProtoReflect.Descriptor instead.
func (*MlCommand_CleanCache) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_proto_rawDescGZIP(), []int{0, 2}
}

// Get the information of all the ML cached objects
type MlCommand_GetCacheInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MlCommand_GetCacheInfo) Reset() {
	*x = MlCommand_GetCacheInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlCommand_GetCacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlCommand_GetCacheInfo) ProtoMessage() {}

func (x *MlCommand_GetCacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlCommand_GetCacheInfo.ProtoReflect.Descriptor instead.
func (*MlCommand_GetCacheInfo) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_proto_rawDescGZIP(), []int{0, 3}
}

// Command to write ML operator
type MlCommand_Write struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// It could be an estimator/evaluator or the cached model
	//
	// Types that are assignable to Type:
	//
	//	*MlCommand_Write_Operator
	//	*MlCommand_Write_ObjRef
	Type isMlCommand_Write_Type `protobuf_oneof:"type"`
	// (Optional) The parameters of operator which could be estimator/evaluator or a cached model
	Params *MlParams `protobuf:"bytes,3,opt,name=params,proto3,oneof" json:"params,omitempty"`
	// (Required) Save the ML instance to the path
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// (Optional) Overwrites if the output path already exists.
	ShouldOverwrite *bool `protobuf:"varint,5,opt,name=should_overwrite,json=shouldOverwrite,proto3,oneof" json:"should_overwrite,omitempty"`
	// (Optional) The options of the writer
	Options map[string]string `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MlCommand_Write) Reset() {
	*x = MlCommand_Write{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlCommand_Write) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlCommand_Write) ProtoMessage() {}

func (x *MlCommand_Write) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlCommand_Write.ProtoReflect.Descriptor instead.
func (*MlCommand_Write) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_proto_rawDescGZIP(), []int{0, 4}
}

func (m *MlCommand_Write) GetType() isMlCommand_Write_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MlCommand_Write) GetOperator() *MlOperator {
	if x, ok := x.GetType().(*MlCommand_Write_Operator); ok {
		return x.Operator
	}
	return nil
}

func (x *MlCommand_Write) GetObjRef() *ObjectRef {
	if x, ok := x.GetType().(*MlCommand_Write_ObjRef); ok {
		return x.ObjRef
	}
	return nil
}

func (x *MlCommand_Write) GetParams() *MlParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *MlCommand_Write) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MlCommand_Write) GetShouldOverwrite() bool {
	if x != nil && x.ShouldOverwrite != nil {
		return *x.ShouldOverwrite
	}
	return false
}

func (x *MlCommand_Write) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type isMlCommand_Write_Type interface {
	isMlCommand_Write_Type()
}

type MlCommand_Write_Operator struct {
	// Estimator or evaluator
	Operator *MlOperator `protobuf:"bytes,1,opt,name=operator,proto3,oneof"`
}

type MlCommand_Write_ObjRef struct {
	// The cached model
	ObjRef *ObjectRef `protobuf:"bytes,2,opt,name=obj_ref,json=objRef,proto3,oneof"`
}

func (*MlCommand_Write_Operator) isMlCommand_Write_Type() {}

func (*MlCommand_Write_ObjRef) isMlCommand_Write_Type() {}

// Command to load ML operator.
type MlCommand_Read struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) ML operator information
	Operator *MlOperator `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// (Required) Load the ML instance from the input path
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *MlCommand_Read) Reset() {
	*x = MlCommand_Read{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlCommand_Read) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlCommand_Read) ProtoMessage() {}

func (x *MlCommand_Read) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlCommand_Read.ProtoReflect.Descriptor instead.
func (*MlCommand_Read) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MlCommand_Read) GetOperator() *MlOperator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *MlCommand_Read) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Command for evaluator.evaluate(dataset)
type MlCommand_Evaluate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Evaluator information (its type should be OPERATOR_TYPE_EVALUATOR)
	Evaluator *MlOperator `protobuf:"bytes,1,opt,name=evaluator,proto3" json:"evaluator,omitempty"`
	// (Optional) parameters of the Evaluator
	Params *MlParams `protobuf:"bytes,2,opt,name=params,proto3,oneof" json:"params,omitempty"`
	// (Required) the evaluating dataset
	Dataset *Relation `protobuf:"bytes,3,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *MlCommand_Evaluate) Reset() {
	*x = MlCommand_Evaluate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlCommand_Evaluate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlCommand_Evaluate) ProtoMessage() {}

func (x *MlCommand_Evaluate) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlCommand_Evaluate.ProtoReflect.Descriptor instead.
func (*MlCommand_Evaluate) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_proto_rawDescGZIP(), []int{0, 6}
}

func (x *MlCommand_Evaluate) GetEvaluator() *MlOperator {
	if x != nil {
		return x.Evaluator
	}
	return nil
}

func (x *MlCommand_Evaluate) GetParams() *MlParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *MlCommand_Evaluate) GetDataset() *Relation {
	if x != nil {
		return x.Dataset
	}
	return nil
}

// Represents an operator info
type MlCommandResult_MlOperatorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*MlCommandResult_MlOperatorInfo_ObjRef
	//	*MlCommandResult_MlOperatorInfo_Name
	Type isMlCommandResult_MlOperatorInfo_Type `protobuf_oneof:"type"`
	// (Optional) the 'uid' of a ML object
	// Note it is different from the 'id' of a cached object.
	Uid *string `protobuf:"bytes,3,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	// (Optional) parameters
	Params *MlParams `protobuf:"bytes,4,opt,name=params,proto3,oneof" json:"params,omitempty"`
	// (Optional) warning message generated during the ML command execution
	WarningMessage *string `protobuf:"bytes,5,opt,name=warning_message,json=warningMessage,proto3,oneof" json:"warning_message,omitempty"`
}

func (x *MlCommandResult_MlOperatorInfo) Reset() {
	*x = MlCommandResult_MlOperatorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlCommandResult_MlOperatorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlCommandResult_MlOperatorInfo) ProtoMessage() {}

func (x *MlCommandResult_MlOperatorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlCommandResult_MlOperatorInfo.ProtoReflect.Descriptor instead.
func (*MlCommandResult_MlOperatorInfo) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_proto_rawDescGZIP(), []int{1, 0}
}

func (m *MlCommandResult_MlOperatorInfo) GetType() isMlCommandResult_MlOperatorInfo_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MlCommandResult_MlOperatorInfo) GetObjRef() *ObjectRef {
	if x, ok := x.GetType().(*MlCommandResult_MlOperatorInfo_ObjRef); ok {
		return x.ObjRef
	}
	return nil
}

func (x *MlCommandResult_MlOperatorInfo) GetName() string {
	if x, ok := x.GetType().(*MlCommandResult_MlOperatorInfo_Name); ok {
		return x.Name
	}
	return ""
}

func (x *MlCommandResult_MlOperatorInfo) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *MlCommandResult_MlOperatorInfo) GetParams() *MlParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *MlCommandResult_MlOperatorInfo) GetWarningMessage() string {
	if x != nil && x.WarningMessage != nil {
		return *x.WarningMessage
	}
	return ""
}

type isMlCommandResult_MlOperatorInfo_Type interface {
	isMlCommandResult_MlOperatorInfo_Type()
}

type MlCommandResult_MlOperatorInfo_ObjRef struct {
	// The cached object which could be a model or summary evaluated by a model
	ObjRef *ObjectRef `protobuf:"bytes,1,opt,name=obj_ref,json=objRef,proto3,oneof"`
}

type MlCommandResult_MlOperatorInfo_Name struct {
	// Operator name
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*MlCommandResult_MlOperatorInfo_ObjRef) isMlCommandResult_MlOperatorInfo_Type() {}

func (*MlCommandResult_MlOperatorInfo_Name) isMlCommandResult_MlOperatorInfo_Type() {}

var File_spark_connect_ml_proto protoreflect.FileDescriptor

var file_spark_connect_ml_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f,
	0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x1d, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x0b, 0x0a, 0x09, 0x4d, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x03, 0x66, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x4d, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x66, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x3f, 0x0a, 0x08,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a,
	0x0b, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x4d, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xb2, 0x01, 0x0a, 0x03, 0x46, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x09,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x4d, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3d, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52,
	0x07, 0x6f, 0x62, 0x6a, 0x52, 0x65, 0x66, 0x73, 0x1a, 0x0c, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x1a, 0x0e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x9a, 0x03, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x4d, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x62, 0x6a,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x52, 0x65, 0x66, 0x12, 0x34,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x1a, 0x51, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0xb7, 0x01, 0x0a, 0x08, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xd5, 0x03, 0x0a, 0x0f,
	0x4d, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x85, 0x02, 0x0a,
	0x0e, 0x4d, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x33, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x4d, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x02, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x36, 0x0a, 0x1e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_spark_connect_ml_proto_rawDescOnce sync.Once
	file_spark_connect_ml_proto_rawDescData = file_spark_connect_ml_proto_rawDesc
)

func file_spark_connect_ml_proto_rawDescGZIP() []byte {
	file_spark_connect_ml_proto_rawDescOnce.Do(func() {
		file_spark_connect_ml_proto_rawDescData = protoimpl.X.CompressGZIP(file_spark_connect_ml_proto_rawDescData)
	})
	return file_spark_connect_ml_proto_rawDescData
}

var file_spark_connect_ml_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_spark_connect_ml_proto_goTypes = []interface{}{
	(*MlCommand)(nil),                      // 0: spark.connect.MlCommand
	(*MlCommandResult)(nil),                // 1: spark.connect.MlCommandResult
	(*MlCommand_Fit)(nil),                  // 2: spark.connect.MlCommand.Fit
	(*MlCommand_Delete)(nil),               // 3: spark.connect.MlCommand.Delete
	(*MlCommand_CleanCache)(nil),           // 4: spark.connect.MlCommand.CleanCache
	(*MlCommand_GetCacheInfo)(nil),         // 5: spark.connect.MlCommand.GetCacheInfo
	(*MlCommand_Write)(nil),                // 6: spark.connect.MlCommand.Write
	(*MlCommand_Read)(nil),                 // 7: spark.connect.MlCommand.Read
	(*MlCommand_Evaluate)(nil),             // 8: spark.connect.MlCommand.Evaluate
	nil,                                    // 9: spark.connect.MlCommand.Write.OptionsEntry
	(*MlCommandResult_MlOperatorInfo)(nil), // 10: spark.connect.MlCommandResult.MlOperatorInfo
	(*Fetch)(nil),                          // 11: spark.connect.Fetch
	(*Expression_Literal)(nil),             // 12: spark.connect.Expression.Literal
	(*MlOperator)(nil),                     // 13: spark.connect.MlOperator
	(*MlParams)(nil),                       // 14: spark.connect.MlParams
	(*Relation)(nil),                       // 15: spark.connect.Relation
	(*ObjectRef)(nil),                      // 16: spark.connect.ObjectRef
}
var file_spark_connect_ml_proto_depIdxs = []int32{
	2,  // 0: spark.connect.MlCommand.fit:type_name -> spark.connect.MlCommand.Fit
	11, // 1: spark.connect.MlCommand.fetch:type_name -> spark.connect.Fetch
	3,  // 2: spark.connect.MlCommand.delete:type_name -> spark.connect.MlCommand.Delete
	6,  // 3: spark.connect.MlCommand.write:type_name -> spark.connect.MlCommand.Write
	7,  // 4: spark.connect.MlCommand.read:type_name -> spark.connect.MlCommand.Read
	8,  // 5: spark.connect.MlCommand.evaluate:type_name -> spark.connect.MlCommand.Evaluate
	4,  // 6: spark.connect.MlCommand.clean_cache:type_name -> spark.connect.MlCommand.CleanCache
	5,  // 7: spark.connect.MlCommand.get_cache_info:type_name -> spark.connect.MlCommand.GetCacheInfo
	12, // 8: spark.connect.MlCommandResult.param:type_name -> spark.connect.Expression.Literal
	10, // 9: spark.connect.MlCommandResult.operator_info:type_name -> spark.connect.MlCommandResult.MlOperatorInfo
	13, // 10: spark.connect.MlCommand.Fit.estimator:type_name -> spark.connect.MlOperator
	14, // 11: spark.connect.MlCommand.Fit.params:type_name -> spark.connect.MlParams
	15, // 12: spark.connect.MlCommand.Fit.dataset:type_name -> spark.connect.Relation
	16, // 13: spark.connect.MlCommand.Delete.obj_refs:type_name -> spark.connect.ObjectRef
	13, // 14: spark.connect.MlCommand.Write.operator:type_name -> spark.connect.MlOperator
	16, // 15: spark.connect.MlCommand.Write.obj_ref:type_name -> spark.connect.ObjectRef
	14, // 16: spark.connect.MlCommand.Write.params:type_name -> spark.connect.MlParams
	9,  // 17: spark.connect.MlCommand.Write.options:type_name -> spark.connect.MlCommand.Write.OptionsEntry
	13, // 18: spark.connect.MlCommand.Read.operator:type_name -> spark.connect.MlOperator
	13, // 19: spark.connect.MlCommand.Evaluate.evaluator:type_name -> spark.connect.MlOperator
	14, // 20: spark.connect.MlCommand.Evaluate.params:type_name -> spark.connect.MlParams
	15, // 21: spark.connect.MlCommand.Evaluate.dataset:type_name -> spark.connect.Relation
	16, // 22: spark.connect.MlCommandResult.MlOperatorInfo.obj_ref:type_name -> spark.connect.ObjectRef
	14, // 23: spark.connect.MlCommandResult.MlOperatorInfo.params:type_name -> spark.connect.MlParams
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_spark_connect_ml_proto_init() }
func file_spark_connect_ml_proto_init() {
	if File_spark_connect_ml_proto != nil {
		return
	}
	file_spark_connect_relations_proto_init()
	file_spark_connect_expressions_proto_init()
	file_spark_connect_ml_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spark_connect_ml_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_ml_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlCommandResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_ml_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlCommand_Fit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_ml_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlCommand_Delete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_ml_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlCommand_CleanCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_ml_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlCommand_GetCacheInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_ml_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlCommand_Write); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_ml_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlCommand_Read); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_ml_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlCommand_Evaluate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_ml_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlCommandResult_MlOperatorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spark_connect_ml_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MlCommand_Fit_)(nil),
		(*MlCommand_Fetch)(nil),
		(*MlCommand_Delete_)(nil),
		(*MlCommand_Write_)(nil),
		(*MlCommand_Read_)(nil),
		(*MlCommand_Evaluate_)(nil),
		(*MlCommand_CleanCache_)(nil),
		(*MlCommand_GetCacheInfo_)(nil),
	}
	file_spark_connect_ml_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MlCommandResult_Param)(nil),
		(*MlCommandResult_Summary)(nil),
		(*MlCommandResult_OperatorInfo)(nil),
	}
	file_spark_connect_ml_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_spark_connect_ml_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*MlCommand_Write_Operator)(nil),
		(*MlCommand_Write_ObjRef)(nil),
	}
	file_spark_connect_ml_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_spark_connect_ml_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*MlCommandResult_MlOperatorInfo_ObjRef)(nil),
		(*MlCommandResult_MlOperatorInfo_Name)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spark_connect_ml_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spark_connect_ml_proto_goTypes,
		DependencyIndexes: file_spark_connect_ml_proto_depIdxs,
		MessageInfos:      file_spark_connect_ml_proto_msgTypes,
	}.Build()
	File_spark_connect_ml_proto = out.File
	file_spark_connect_ml_proto_rawDesc = nil
	file_spark_connect_ml_proto_goTypes = nil
	file_spark_connect_ml_proto_depIdxs = nil
}
