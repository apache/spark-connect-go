//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: spark/connect/ml_common.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MlOperator_OperatorType int32

const (
	MlOperator_OPERATOR_TYPE_UNSPECIFIED MlOperator_OperatorType = 0
	// ML estimator
	MlOperator_OPERATOR_TYPE_ESTIMATOR MlOperator_OperatorType = 1
	// ML transformer (non-model)
	MlOperator_OPERATOR_TYPE_TRANSFORMER MlOperator_OperatorType = 2
	// ML evaluator
	MlOperator_OPERATOR_TYPE_EVALUATOR MlOperator_OperatorType = 3
	// ML model
	MlOperator_OPERATOR_TYPE_MODEL MlOperator_OperatorType = 4
)

// Enum value maps for MlOperator_OperatorType.
var (
	MlOperator_OperatorType_name = map[int32]string{
		0: "OPERATOR_TYPE_UNSPECIFIED",
		1: "OPERATOR_TYPE_ESTIMATOR",
		2: "OPERATOR_TYPE_TRANSFORMER",
		3: "OPERATOR_TYPE_EVALUATOR",
		4: "OPERATOR_TYPE_MODEL",
	}
	MlOperator_OperatorType_value = map[string]int32{
		"OPERATOR_TYPE_UNSPECIFIED": 0,
		"OPERATOR_TYPE_ESTIMATOR":   1,
		"OPERATOR_TYPE_TRANSFORMER": 2,
		"OPERATOR_TYPE_EVALUATOR":   3,
		"OPERATOR_TYPE_MODEL":       4,
	}
)

func (x MlOperator_OperatorType) Enum() *MlOperator_OperatorType {
	p := new(MlOperator_OperatorType)
	*p = x
	return p
}

func (x MlOperator_OperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MlOperator_OperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_spark_connect_ml_common_proto_enumTypes[0].Descriptor()
}

func (MlOperator_OperatorType) Type() protoreflect.EnumType {
	return &file_spark_connect_ml_common_proto_enumTypes[0]
}

func (x MlOperator_OperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MlOperator_OperatorType.Descriptor instead.
func (MlOperator_OperatorType) EnumDescriptor() ([]byte, []int) {
	return file_spark_connect_ml_common_proto_rawDescGZIP(), []int{1, 0}
}

// MlParams stores param settings for ML Estimator / Transformer / Evaluator
type MlParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User-supplied params
	Params map[string]*Expression_Literal `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MlParams) Reset() {
	*x = MlParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlParams) ProtoMessage() {}

func (x *MlParams) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlParams.ProtoReflect.Descriptor instead.
func (*MlParams) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_common_proto_rawDescGZIP(), []int{0}
}

func (x *MlParams) GetParams() map[string]*Expression_Literal {
	if x != nil {
		return x.Params
	}
	return nil
}

// MLOperator represents the ML operators like (Estimator, Transformer or Evaluator)
type MlOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) The qualified name of the ML operator.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// (Required) Unique id of the ML operator
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// (Required) Represents what the ML operator is
	Type MlOperator_OperatorType `protobuf:"varint,3,opt,name=type,proto3,enum=spark.connect.MlOperator_OperatorType" json:"type,omitempty"`
}

func (x *MlOperator) Reset() {
	*x = MlOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlOperator) ProtoMessage() {}

func (x *MlOperator) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlOperator.ProtoReflect.Descriptor instead.
func (*MlOperator) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_common_proto_rawDescGZIP(), []int{1}
}

func (x *MlOperator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MlOperator) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *MlOperator) GetType() MlOperator_OperatorType {
	if x != nil {
		return x.Type
	}
	return MlOperator_OPERATOR_TYPE_UNSPECIFIED
}

// Represents a reference to the cached object which could be a model
// or summary evaluated by a model
type ObjectRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) The ID is used to lookup the object on the server side.
	// Note it is different from the 'uid' of a ML object.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ObjectRef) Reset() {
	*x = ObjectRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_ml_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectRef) ProtoMessage() {}

func (x *ObjectRef) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_ml_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectRef.ProtoReflect.Descriptor instead.
func (*ObjectRef) Descriptor() ([]byte, []int) {
	return file_spark_connect_ml_common_proto_rawDescGZIP(), []int{2}
}

func (x *ObjectRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_spark_connect_ml_common_proto protoreflect.FileDescriptor

var file_spark_connect_ml_common_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f,
	0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x1f,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa5, 0x01, 0x0a, 0x08, 0x4d, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x5c, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x02, 0x0a, 0x0a, 0x4d, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x04, 0x22, 0x1b, 0x0a, 0x09, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42, 0x36, 0x0a, 0x1e, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spark_connect_ml_common_proto_rawDescOnce sync.Once
	file_spark_connect_ml_common_proto_rawDescData = file_spark_connect_ml_common_proto_rawDesc
)

func file_spark_connect_ml_common_proto_rawDescGZIP() []byte {
	file_spark_connect_ml_common_proto_rawDescOnce.Do(func() {
		file_spark_connect_ml_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_spark_connect_ml_common_proto_rawDescData)
	})
	return file_spark_connect_ml_common_proto_rawDescData
}

var file_spark_connect_ml_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spark_connect_ml_common_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_spark_connect_ml_common_proto_goTypes = []interface{}{
	(MlOperator_OperatorType)(0), // 0: spark.connect.MlOperator.OperatorType
	(*MlParams)(nil),             // 1: spark.connect.MlParams
	(*MlOperator)(nil),           // 2: spark.connect.MlOperator
	(*ObjectRef)(nil),            // 3: spark.connect.ObjectRef
	nil,                          // 4: spark.connect.MlParams.ParamsEntry
	(*Expression_Literal)(nil),   // 5: spark.connect.Expression.Literal
}
var file_spark_connect_ml_common_proto_depIdxs = []int32{
	4, // 0: spark.connect.MlParams.params:type_name -> spark.connect.MlParams.ParamsEntry
	0, // 1: spark.connect.MlOperator.type:type_name -> spark.connect.MlOperator.OperatorType
	5, // 2: spark.connect.MlParams.ParamsEntry.value:type_name -> spark.connect.Expression.Literal
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_spark_connect_ml_common_proto_init() }
func file_spark_connect_ml_common_proto_init() {
	if File_spark_connect_ml_common_proto != nil {
		return
	}
	file_spark_connect_expressions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spark_connect_ml_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_ml_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_ml_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spark_connect_ml_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spark_connect_ml_common_proto_goTypes,
		DependencyIndexes: file_spark_connect_ml_common_proto_depIdxs,
		EnumInfos:         file_spark_connect_ml_common_proto_enumTypes,
		MessageInfos:      file_spark_connect_ml_common_proto_msgTypes,
	}.Build()
	File_spark_connect_ml_common_proto = out.File
	file_spark_connect_ml_common_proto_rawDesc = nil
	file_spark_connect_ml_common_proto_goTypes = nil
	file_spark_connect_ml_common_proto_depIdxs = nil
}
