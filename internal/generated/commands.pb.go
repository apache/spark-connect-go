//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: spark/connect/commands.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WriteOperation_SaveMode int32

const (
	WriteOperation_SAVE_MODE_UNSPECIFIED     WriteOperation_SaveMode = 0
	WriteOperation_SAVE_MODE_APPEND          WriteOperation_SaveMode = 1
	WriteOperation_SAVE_MODE_OVERWRITE       WriteOperation_SaveMode = 2
	WriteOperation_SAVE_MODE_ERROR_IF_EXISTS WriteOperation_SaveMode = 3
	WriteOperation_SAVE_MODE_IGNORE          WriteOperation_SaveMode = 4
)

// Enum value maps for WriteOperation_SaveMode.
var (
	WriteOperation_SaveMode_name = map[int32]string{
		0: "SAVE_MODE_UNSPECIFIED",
		1: "SAVE_MODE_APPEND",
		2: "SAVE_MODE_OVERWRITE",
		3: "SAVE_MODE_ERROR_IF_EXISTS",
		4: "SAVE_MODE_IGNORE",
	}
	WriteOperation_SaveMode_value = map[string]int32{
		"SAVE_MODE_UNSPECIFIED":     0,
		"SAVE_MODE_APPEND":          1,
		"SAVE_MODE_OVERWRITE":       2,
		"SAVE_MODE_ERROR_IF_EXISTS": 3,
		"SAVE_MODE_IGNORE":          4,
	}
)

func (x WriteOperation_SaveMode) Enum() *WriteOperation_SaveMode {
	p := new(WriteOperation_SaveMode)
	*p = x
	return p
}

func (x WriteOperation_SaveMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WriteOperation_SaveMode) Descriptor() protoreflect.EnumDescriptor {
	return file_spark_connect_commands_proto_enumTypes[0].Descriptor()
}

func (WriteOperation_SaveMode) Type() protoreflect.EnumType {
	return &file_spark_connect_commands_proto_enumTypes[0]
}

func (x WriteOperation_SaveMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WriteOperation_SaveMode.Descriptor instead.
func (WriteOperation_SaveMode) EnumDescriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{3, 0}
}

type WriteOperation_SaveTable_TableSaveMethod int32

const (
	WriteOperation_SaveTable_TABLE_SAVE_METHOD_UNSPECIFIED   WriteOperation_SaveTable_TableSaveMethod = 0
	WriteOperation_SaveTable_TABLE_SAVE_METHOD_SAVE_AS_TABLE WriteOperation_SaveTable_TableSaveMethod = 1
	WriteOperation_SaveTable_TABLE_SAVE_METHOD_INSERT_INTO   WriteOperation_SaveTable_TableSaveMethod = 2
)

// Enum value maps for WriteOperation_SaveTable_TableSaveMethod.
var (
	WriteOperation_SaveTable_TableSaveMethod_name = map[int32]string{
		0: "TABLE_SAVE_METHOD_UNSPECIFIED",
		1: "TABLE_SAVE_METHOD_SAVE_AS_TABLE",
		2: "TABLE_SAVE_METHOD_INSERT_INTO",
	}
	WriteOperation_SaveTable_TableSaveMethod_value = map[string]int32{
		"TABLE_SAVE_METHOD_UNSPECIFIED":   0,
		"TABLE_SAVE_METHOD_SAVE_AS_TABLE": 1,
		"TABLE_SAVE_METHOD_INSERT_INTO":   2,
	}
)

func (x WriteOperation_SaveTable_TableSaveMethod) Enum() *WriteOperation_SaveTable_TableSaveMethod {
	p := new(WriteOperation_SaveTable_TableSaveMethod)
	*p = x
	return p
}

func (x WriteOperation_SaveTable_TableSaveMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WriteOperation_SaveTable_TableSaveMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_spark_connect_commands_proto_enumTypes[1].Descriptor()
}

func (WriteOperation_SaveTable_TableSaveMethod) Type() protoreflect.EnumType {
	return &file_spark_connect_commands_proto_enumTypes[1]
}

func (x WriteOperation_SaveTable_TableSaveMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WriteOperation_SaveTable_TableSaveMethod.Descriptor instead.
func (WriteOperation_SaveTable_TableSaveMethod) EnumDescriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{3, 1, 0}
}

type WriteOperationV2_Mode int32

const (
	WriteOperationV2_MODE_UNSPECIFIED          WriteOperationV2_Mode = 0
	WriteOperationV2_MODE_CREATE               WriteOperationV2_Mode = 1
	WriteOperationV2_MODE_OVERWRITE            WriteOperationV2_Mode = 2
	WriteOperationV2_MODE_OVERWRITE_PARTITIONS WriteOperationV2_Mode = 3
	WriteOperationV2_MODE_APPEND               WriteOperationV2_Mode = 4
	WriteOperationV2_MODE_REPLACE              WriteOperationV2_Mode = 5
	WriteOperationV2_MODE_CREATE_OR_REPLACE    WriteOperationV2_Mode = 6
)

// Enum value maps for WriteOperationV2_Mode.
var (
	WriteOperationV2_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_CREATE",
		2: "MODE_OVERWRITE",
		3: "MODE_OVERWRITE_PARTITIONS",
		4: "MODE_APPEND",
		5: "MODE_REPLACE",
		6: "MODE_CREATE_OR_REPLACE",
	}
	WriteOperationV2_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED":          0,
		"MODE_CREATE":               1,
		"MODE_OVERWRITE":            2,
		"MODE_OVERWRITE_PARTITIONS": 3,
		"MODE_APPEND":               4,
		"MODE_REPLACE":              5,
		"MODE_CREATE_OR_REPLACE":    6,
	}
)

func (x WriteOperationV2_Mode) Enum() *WriteOperationV2_Mode {
	p := new(WriteOperationV2_Mode)
	*p = x
	return p
}

func (x WriteOperationV2_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WriteOperationV2_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_spark_connect_commands_proto_enumTypes[2].Descriptor()
}

func (WriteOperationV2_Mode) Type() protoreflect.EnumType {
	return &file_spark_connect_commands_proto_enumTypes[2]
}

func (x WriteOperationV2_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WriteOperationV2_Mode.Descriptor instead.
func (WriteOperationV2_Mode) EnumDescriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{4, 0}
}

// A [[Command]] is an operation that is executed by the server that does not directly consume or
// produce a relational result.
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CommandType:
	//
	//	*Command_RegisterFunction
	//	*Command_WriteOperation
	//	*Command_CreateDataframeView
	//	*Command_WriteOperationV2
	//	*Command_SqlCommand
	//	*Command_WriteStreamOperationStart
	//	*Command_StreamingQueryCommand
	//	*Command_GetResourcesCommand
	//	*Command_StreamingQueryManagerCommand
	//	*Command_RegisterTableFunction
	//	*Command_Extension
	CommandType isCommand_CommandType `protobuf_oneof:"command_type"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{0}
}

func (m *Command) GetCommandType() isCommand_CommandType {
	if m != nil {
		return m.CommandType
	}
	return nil
}

func (x *Command) GetRegisterFunction() *CommonInlineUserDefinedFunction {
	if x, ok := x.GetCommandType().(*Command_RegisterFunction); ok {
		return x.RegisterFunction
	}
	return nil
}

func (x *Command) GetWriteOperation() *WriteOperation {
	if x, ok := x.GetCommandType().(*Command_WriteOperation); ok {
		return x.WriteOperation
	}
	return nil
}

func (x *Command) GetCreateDataframeView() *CreateDataFrameViewCommand {
	if x, ok := x.GetCommandType().(*Command_CreateDataframeView); ok {
		return x.CreateDataframeView
	}
	return nil
}

func (x *Command) GetWriteOperationV2() *WriteOperationV2 {
	if x, ok := x.GetCommandType().(*Command_WriteOperationV2); ok {
		return x.WriteOperationV2
	}
	return nil
}

func (x *Command) GetSqlCommand() *SqlCommand {
	if x, ok := x.GetCommandType().(*Command_SqlCommand); ok {
		return x.SqlCommand
	}
	return nil
}

func (x *Command) GetWriteStreamOperationStart() *WriteStreamOperationStart {
	if x, ok := x.GetCommandType().(*Command_WriteStreamOperationStart); ok {
		return x.WriteStreamOperationStart
	}
	return nil
}

func (x *Command) GetStreamingQueryCommand() *StreamingQueryCommand {
	if x, ok := x.GetCommandType().(*Command_StreamingQueryCommand); ok {
		return x.StreamingQueryCommand
	}
	return nil
}

func (x *Command) GetGetResourcesCommand() *GetResourcesCommand {
	if x, ok := x.GetCommandType().(*Command_GetResourcesCommand); ok {
		return x.GetResourcesCommand
	}
	return nil
}

func (x *Command) GetStreamingQueryManagerCommand() *StreamingQueryManagerCommand {
	if x, ok := x.GetCommandType().(*Command_StreamingQueryManagerCommand); ok {
		return x.StreamingQueryManagerCommand
	}
	return nil
}

func (x *Command) GetRegisterTableFunction() *CommonInlineUserDefinedTableFunction {
	if x, ok := x.GetCommandType().(*Command_RegisterTableFunction); ok {
		return x.RegisterTableFunction
	}
	return nil
}

func (x *Command) GetExtension() *anypb.Any {
	if x, ok := x.GetCommandType().(*Command_Extension); ok {
		return x.Extension
	}
	return nil
}

type isCommand_CommandType interface {
	isCommand_CommandType()
}

type Command_RegisterFunction struct {
	RegisterFunction *CommonInlineUserDefinedFunction `protobuf:"bytes,1,opt,name=register_function,json=registerFunction,proto3,oneof"`
}

type Command_WriteOperation struct {
	WriteOperation *WriteOperation `protobuf:"bytes,2,opt,name=write_operation,json=writeOperation,proto3,oneof"`
}

type Command_CreateDataframeView struct {
	CreateDataframeView *CreateDataFrameViewCommand `protobuf:"bytes,3,opt,name=create_dataframe_view,json=createDataframeView,proto3,oneof"`
}

type Command_WriteOperationV2 struct {
	WriteOperationV2 *WriteOperationV2 `protobuf:"bytes,4,opt,name=write_operation_v2,json=writeOperationV2,proto3,oneof"`
}

type Command_SqlCommand struct {
	SqlCommand *SqlCommand `protobuf:"bytes,5,opt,name=sql_command,json=sqlCommand,proto3,oneof"`
}

type Command_WriteStreamOperationStart struct {
	WriteStreamOperationStart *WriteStreamOperationStart `protobuf:"bytes,6,opt,name=write_stream_operation_start,json=writeStreamOperationStart,proto3,oneof"`
}

type Command_StreamingQueryCommand struct {
	StreamingQueryCommand *StreamingQueryCommand `protobuf:"bytes,7,opt,name=streaming_query_command,json=streamingQueryCommand,proto3,oneof"`
}

type Command_GetResourcesCommand struct {
	GetResourcesCommand *GetResourcesCommand `protobuf:"bytes,8,opt,name=get_resources_command,json=getResourcesCommand,proto3,oneof"`
}

type Command_StreamingQueryManagerCommand struct {
	StreamingQueryManagerCommand *StreamingQueryManagerCommand `protobuf:"bytes,9,opt,name=streaming_query_manager_command,json=streamingQueryManagerCommand,proto3,oneof"`
}

type Command_RegisterTableFunction struct {
	RegisterTableFunction *CommonInlineUserDefinedTableFunction `protobuf:"bytes,10,opt,name=register_table_function,json=registerTableFunction,proto3,oneof"`
}

type Command_Extension struct {
	// This field is used to mark extensions to the protocol. When plugins generate arbitrary
	// Commands they can add them here. During the planning the correct resolution is done.
	Extension *anypb.Any `protobuf:"bytes,999,opt,name=extension,proto3,oneof"`
}

func (*Command_RegisterFunction) isCommand_CommandType() {}

func (*Command_WriteOperation) isCommand_CommandType() {}

func (*Command_CreateDataframeView) isCommand_CommandType() {}

func (*Command_WriteOperationV2) isCommand_CommandType() {}

func (*Command_SqlCommand) isCommand_CommandType() {}

func (*Command_WriteStreamOperationStart) isCommand_CommandType() {}

func (*Command_StreamingQueryCommand) isCommand_CommandType() {}

func (*Command_GetResourcesCommand) isCommand_CommandType() {}

func (*Command_StreamingQueryManagerCommand) isCommand_CommandType() {}

func (*Command_RegisterTableFunction) isCommand_CommandType() {}

func (*Command_Extension) isCommand_CommandType() {}

// A SQL Command is used to trigger the eager evaluation of SQL commands in Spark.
//
// When the SQL provide as part of the message is a command it will be immediately evaluated
// and the result will be collected and returned as part of a LocalRelation. If the result is
// not a command, the operation will simply return a SQL Relation. This allows the client to be
// almost oblivious to the server-side behavior.
type SqlCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) SQL Query.
	Sql string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	// (Optional) A map of parameter names to literal expressions.
	Args map[string]*Expression_Literal `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (Optional) A sequence of literal expressions for positional parameters in the SQL query text.
	PosArgs []*Expression_Literal `protobuf:"bytes,3,rep,name=pos_args,json=posArgs,proto3" json:"pos_args,omitempty"`
}

func (x *SqlCommand) Reset() {
	*x = SqlCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCommand) ProtoMessage() {}

func (x *SqlCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCommand.ProtoReflect.Descriptor instead.
func (*SqlCommand) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{1}
}

func (x *SqlCommand) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *SqlCommand) GetArgs() map[string]*Expression_Literal {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *SqlCommand) GetPosArgs() []*Expression_Literal {
	if x != nil {
		return x.PosArgs
	}
	return nil
}

// A command that can create DataFrame global temp view or local temp view.
type CreateDataFrameViewCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) The relation that this view will be built on.
	Input *Relation `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// (Required) View name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// (Required) Whether this is global temp view or local temp view.
	IsGlobal bool `protobuf:"varint,3,opt,name=is_global,json=isGlobal,proto3" json:"is_global,omitempty"`
	// (Required)
	//
	// If true, and if the view already exists, updates it; if false, and if the view
	// already exists, throws exception.
	Replace bool `protobuf:"varint,4,opt,name=replace,proto3" json:"replace,omitempty"`
}

func (x *CreateDataFrameViewCommand) Reset() {
	*x = CreateDataFrameViewCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataFrameViewCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataFrameViewCommand) ProtoMessage() {}

func (x *CreateDataFrameViewCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataFrameViewCommand.ProtoReflect.Descriptor instead.
func (*CreateDataFrameViewCommand) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDataFrameViewCommand) GetInput() *Relation {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CreateDataFrameViewCommand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDataFrameViewCommand) GetIsGlobal() bool {
	if x != nil {
		return x.IsGlobal
	}
	return false
}

func (x *CreateDataFrameViewCommand) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

// As writes are not directly handled during analysis and planning, they are modeled as commands.
type WriteOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) The output of the `input` relation will be persisted according to the options.
	Input *Relation `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// (Optional) Format value according to the Spark documentation. Examples are: text, parquet, delta.
	Source *string `protobuf:"bytes,2,opt,name=source,proto3,oneof" json:"source,omitempty"`
	// (Optional)
	//
	// The destination of the write operation can be either a path or a table.
	// If the destination is neither a path nor a table, such as jdbc and noop,
	// the `save_type` should not be set.
	//
	// Types that are assignable to SaveType:
	//
	//	*WriteOperation_Path
	//	*WriteOperation_Table
	SaveType isWriteOperation_SaveType `protobuf_oneof:"save_type"`
	// (Required) the save mode.
	Mode WriteOperation_SaveMode `protobuf:"varint,5,opt,name=mode,proto3,enum=spark.connect.WriteOperation_SaveMode" json:"mode,omitempty"`
	// (Optional) List of columns to sort the output by.
	SortColumnNames []string `protobuf:"bytes,6,rep,name=sort_column_names,json=sortColumnNames,proto3" json:"sort_column_names,omitempty"`
	// (Optional) List of columns for partitioning.
	PartitioningColumns []string `protobuf:"bytes,7,rep,name=partitioning_columns,json=partitioningColumns,proto3" json:"partitioning_columns,omitempty"`
	// (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
	// to bucket by.
	BucketBy *WriteOperation_BucketBy `protobuf:"bytes,8,opt,name=bucket_by,json=bucketBy,proto3" json:"bucket_by,omitempty"`
	// (Optional) A list of configuration options.
	Options map[string]string `protobuf:"bytes,9,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WriteOperation) Reset() {
	*x = WriteOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteOperation) ProtoMessage() {}

func (x *WriteOperation) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteOperation.ProtoReflect.Descriptor instead.
func (*WriteOperation) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{3}
}

func (x *WriteOperation) GetInput() *Relation {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *WriteOperation) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (m *WriteOperation) GetSaveType() isWriteOperation_SaveType {
	if m != nil {
		return m.SaveType
	}
	return nil
}

func (x *WriteOperation) GetPath() string {
	if x, ok := x.GetSaveType().(*WriteOperation_Path); ok {
		return x.Path
	}
	return ""
}

func (x *WriteOperation) GetTable() *WriteOperation_SaveTable {
	if x, ok := x.GetSaveType().(*WriteOperation_Table); ok {
		return x.Table
	}
	return nil
}

func (x *WriteOperation) GetMode() WriteOperation_SaveMode {
	if x != nil {
		return x.Mode
	}
	return WriteOperation_SAVE_MODE_UNSPECIFIED
}

func (x *WriteOperation) GetSortColumnNames() []string {
	if x != nil {
		return x.SortColumnNames
	}
	return nil
}

func (x *WriteOperation) GetPartitioningColumns() []string {
	if x != nil {
		return x.PartitioningColumns
	}
	return nil
}

func (x *WriteOperation) GetBucketBy() *WriteOperation_BucketBy {
	if x != nil {
		return x.BucketBy
	}
	return nil
}

func (x *WriteOperation) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type isWriteOperation_SaveType interface {
	isWriteOperation_SaveType()
}

type WriteOperation_Path struct {
	Path string `protobuf:"bytes,3,opt,name=path,proto3,oneof"`
}

type WriteOperation_Table struct {
	Table *WriteOperation_SaveTable `protobuf:"bytes,4,opt,name=table,proto3,oneof"`
}

func (*WriteOperation_Path) isWriteOperation_SaveType() {}

func (*WriteOperation_Table) isWriteOperation_SaveType() {}

// As writes are not directly handled during analysis and planning, they are modeled as commands.
type WriteOperationV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) The output of the `input` relation will be persisted according to the options.
	Input *Relation `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// (Required) The destination of the write operation must be either a path or a table.
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// (Optional) A provider for the underlying output data source. Spark's default catalog supports
	// "parquet", "json", etc.
	Provider *string `protobuf:"bytes,3,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	// (Optional) List of columns for partitioning for output table created by `create`,
	// `createOrReplace`, or `replace`
	PartitioningColumns []*Expression `protobuf:"bytes,4,rep,name=partitioning_columns,json=partitioningColumns,proto3" json:"partitioning_columns,omitempty"`
	// (Optional) A list of configuration options.
	Options map[string]string `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (Optional) A list of table properties.
	TableProperties map[string]string `protobuf:"bytes,6,rep,name=table_properties,json=tableProperties,proto3" json:"table_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (Required) Write mode.
	Mode WriteOperationV2_Mode `protobuf:"varint,7,opt,name=mode,proto3,enum=spark.connect.WriteOperationV2_Mode" json:"mode,omitempty"`
	// (Optional) A condition for overwrite saving mode
	OverwriteCondition *Expression `protobuf:"bytes,8,opt,name=overwrite_condition,json=overwriteCondition,proto3" json:"overwrite_condition,omitempty"`
}

func (x *WriteOperationV2) Reset() {
	*x = WriteOperationV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteOperationV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteOperationV2) ProtoMessage() {}

func (x *WriteOperationV2) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteOperationV2.ProtoReflect.Descriptor instead.
func (*WriteOperationV2) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{4}
}

func (x *WriteOperationV2) GetInput() *Relation {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *WriteOperationV2) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *WriteOperationV2) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *WriteOperationV2) GetPartitioningColumns() []*Expression {
	if x != nil {
		return x.PartitioningColumns
	}
	return nil
}

func (x *WriteOperationV2) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *WriteOperationV2) GetTableProperties() map[string]string {
	if x != nil {
		return x.TableProperties
	}
	return nil
}

func (x *WriteOperationV2) GetMode() WriteOperationV2_Mode {
	if x != nil {
		return x.Mode
	}
	return WriteOperationV2_MODE_UNSPECIFIED
}

func (x *WriteOperationV2) GetOverwriteCondition() *Expression {
	if x != nil {
		return x.OverwriteCondition
	}
	return nil
}

// Starts write stream operation as streaming query. Query ID and Run ID of the streaming
// query are returned.
type WriteStreamOperationStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) The output of the `input` streaming relation will be written.
	Input                   *Relation         `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Format                  string            `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Options                 map[string]string `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PartitioningColumnNames []string          `protobuf:"bytes,4,rep,name=partitioning_column_names,json=partitioningColumnNames,proto3" json:"partitioning_column_names,omitempty"`
	// Types that are assignable to Trigger:
	//
	//	*WriteStreamOperationStart_ProcessingTimeInterval
	//	*WriteStreamOperationStart_AvailableNow
	//	*WriteStreamOperationStart_Once
	//	*WriteStreamOperationStart_ContinuousCheckpointInterval
	Trigger    isWriteStreamOperationStart_Trigger `protobuf_oneof:"trigger"`
	OutputMode string                              `protobuf:"bytes,9,opt,name=output_mode,json=outputMode,proto3" json:"output_mode,omitempty"`
	QueryName  string                              `protobuf:"bytes,10,opt,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
	// The destination is optional. When set, it can be a path or a table name.
	//
	// Types that are assignable to SinkDestination:
	//
	//	*WriteStreamOperationStart_Path
	//	*WriteStreamOperationStart_TableName
	SinkDestination isWriteStreamOperationStart_SinkDestination `protobuf_oneof:"sink_destination"`
	ForeachWriter   *StreamingForeachFunction                   `protobuf:"bytes,13,opt,name=foreach_writer,json=foreachWriter,proto3" json:"foreach_writer,omitempty"`
	ForeachBatch    *StreamingForeachFunction                   `protobuf:"bytes,14,opt,name=foreach_batch,json=foreachBatch,proto3" json:"foreach_batch,omitempty"`
}

func (x *WriteStreamOperationStart) Reset() {
	*x = WriteStreamOperationStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteStreamOperationStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteStreamOperationStart) ProtoMessage() {}

func (x *WriteStreamOperationStart) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteStreamOperationStart.ProtoReflect.Descriptor instead.
func (*WriteStreamOperationStart) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{5}
}

func (x *WriteStreamOperationStart) GetInput() *Relation {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *WriteStreamOperationStart) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *WriteStreamOperationStart) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *WriteStreamOperationStart) GetPartitioningColumnNames() []string {
	if x != nil {
		return x.PartitioningColumnNames
	}
	return nil
}

func (m *WriteStreamOperationStart) GetTrigger() isWriteStreamOperationStart_Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (x *WriteStreamOperationStart) GetProcessingTimeInterval() string {
	if x, ok := x.GetTrigger().(*WriteStreamOperationStart_ProcessingTimeInterval); ok {
		return x.ProcessingTimeInterval
	}
	return ""
}

func (x *WriteStreamOperationStart) GetAvailableNow() bool {
	if x, ok := x.GetTrigger().(*WriteStreamOperationStart_AvailableNow); ok {
		return x.AvailableNow
	}
	return false
}

func (x *WriteStreamOperationStart) GetOnce() bool {
	if x, ok := x.GetTrigger().(*WriteStreamOperationStart_Once); ok {
		return x.Once
	}
	return false
}

func (x *WriteStreamOperationStart) GetContinuousCheckpointInterval() string {
	if x, ok := x.GetTrigger().(*WriteStreamOperationStart_ContinuousCheckpointInterval); ok {
		return x.ContinuousCheckpointInterval
	}
	return ""
}

func (x *WriteStreamOperationStart) GetOutputMode() string {
	if x != nil {
		return x.OutputMode
	}
	return ""
}

func (x *WriteStreamOperationStart) GetQueryName() string {
	if x != nil {
		return x.QueryName
	}
	return ""
}

func (m *WriteStreamOperationStart) GetSinkDestination() isWriteStreamOperationStart_SinkDestination {
	if m != nil {
		return m.SinkDestination
	}
	return nil
}

func (x *WriteStreamOperationStart) GetPath() string {
	if x, ok := x.GetSinkDestination().(*WriteStreamOperationStart_Path); ok {
		return x.Path
	}
	return ""
}

func (x *WriteStreamOperationStart) GetTableName() string {
	if x, ok := x.GetSinkDestination().(*WriteStreamOperationStart_TableName); ok {
		return x.TableName
	}
	return ""
}

func (x *WriteStreamOperationStart) GetForeachWriter() *StreamingForeachFunction {
	if x != nil {
		return x.ForeachWriter
	}
	return nil
}

func (x *WriteStreamOperationStart) GetForeachBatch() *StreamingForeachFunction {
	if x != nil {
		return x.ForeachBatch
	}
	return nil
}

type isWriteStreamOperationStart_Trigger interface {
	isWriteStreamOperationStart_Trigger()
}

type WriteStreamOperationStart_ProcessingTimeInterval struct {
	ProcessingTimeInterval string `protobuf:"bytes,5,opt,name=processing_time_interval,json=processingTimeInterval,proto3,oneof"`
}

type WriteStreamOperationStart_AvailableNow struct {
	AvailableNow bool `protobuf:"varint,6,opt,name=available_now,json=availableNow,proto3,oneof"`
}

type WriteStreamOperationStart_Once struct {
	Once bool `protobuf:"varint,7,opt,name=once,proto3,oneof"`
}

type WriteStreamOperationStart_ContinuousCheckpointInterval struct {
	ContinuousCheckpointInterval string `protobuf:"bytes,8,opt,name=continuous_checkpoint_interval,json=continuousCheckpointInterval,proto3,oneof"`
}

func (*WriteStreamOperationStart_ProcessingTimeInterval) isWriteStreamOperationStart_Trigger() {}

func (*WriteStreamOperationStart_AvailableNow) isWriteStreamOperationStart_Trigger() {}

func (*WriteStreamOperationStart_Once) isWriteStreamOperationStart_Trigger() {}

func (*WriteStreamOperationStart_ContinuousCheckpointInterval) isWriteStreamOperationStart_Trigger() {
}

type isWriteStreamOperationStart_SinkDestination interface {
	isWriteStreamOperationStart_SinkDestination()
}

type WriteStreamOperationStart_Path struct {
	Path string `protobuf:"bytes,11,opt,name=path,proto3,oneof"`
}

type WriteStreamOperationStart_TableName struct {
	TableName string `protobuf:"bytes,12,opt,name=table_name,json=tableName,proto3,oneof"`
}

func (*WriteStreamOperationStart_Path) isWriteStreamOperationStart_SinkDestination() {}

func (*WriteStreamOperationStart_TableName) isWriteStreamOperationStart_SinkDestination() {}

type StreamingForeachFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Function:
	//
	//	*StreamingForeachFunction_PythonFunction
	//	*StreamingForeachFunction_ScalaFunction
	Function isStreamingForeachFunction_Function `protobuf_oneof:"function"`
}

func (x *StreamingForeachFunction) Reset() {
	*x = StreamingForeachFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingForeachFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingForeachFunction) ProtoMessage() {}

func (x *StreamingForeachFunction) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingForeachFunction.ProtoReflect.Descriptor instead.
func (*StreamingForeachFunction) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{6}
}

func (m *StreamingForeachFunction) GetFunction() isStreamingForeachFunction_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *StreamingForeachFunction) GetPythonFunction() *PythonUDF {
	if x, ok := x.GetFunction().(*StreamingForeachFunction_PythonFunction); ok {
		return x.PythonFunction
	}
	return nil
}

func (x *StreamingForeachFunction) GetScalaFunction() *ScalarScalaUDF {
	if x, ok := x.GetFunction().(*StreamingForeachFunction_ScalaFunction); ok {
		return x.ScalaFunction
	}
	return nil
}

type isStreamingForeachFunction_Function interface {
	isStreamingForeachFunction_Function()
}

type StreamingForeachFunction_PythonFunction struct {
	PythonFunction *PythonUDF `protobuf:"bytes,1,opt,name=python_function,json=pythonFunction,proto3,oneof"`
}

type StreamingForeachFunction_ScalaFunction struct {
	ScalaFunction *ScalarScalaUDF `protobuf:"bytes,2,opt,name=scala_function,json=scalaFunction,proto3,oneof"`
}

func (*StreamingForeachFunction_PythonFunction) isStreamingForeachFunction_Function() {}

func (*StreamingForeachFunction_ScalaFunction) isStreamingForeachFunction_Function() {}

type WriteStreamOperationStartResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Query instance. See `StreamingQueryInstanceId`.
	QueryId *StreamingQueryInstanceId `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// An optional query name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WriteStreamOperationStartResult) Reset() {
	*x = WriteStreamOperationStartResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteStreamOperationStartResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteStreamOperationStartResult) ProtoMessage() {}

func (x *WriteStreamOperationStartResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteStreamOperationStartResult.ProtoReflect.Descriptor instead.
func (*WriteStreamOperationStartResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{7}
}

func (x *WriteStreamOperationStartResult) GetQueryId() *StreamingQueryInstanceId {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (x *WriteStreamOperationStartResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A tuple that uniquely identifies an instance of streaming query run. It consists of `id` that
// persists across the streaming runs and `run_id` that changes between each run of the
// streaming query that resumes from the checkpoint.
type StreamingQueryInstanceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) The unique id of this query that persists across restarts from checkpoint data.
	// That is, this id is generated when a query is started for the first time, and
	// will be the same every time it is restarted from checkpoint data.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// (Required) The unique id of this run of the query. That is, every start/restart of a query
	// will generate a unique run_id. Therefore, every time a query is restarted from
	// checkpoint, it will have the same `id` but different `run_id`s.
	RunId string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *StreamingQueryInstanceId) Reset() {
	*x = StreamingQueryInstanceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryInstanceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryInstanceId) ProtoMessage() {}

func (x *StreamingQueryInstanceId) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryInstanceId.ProtoReflect.Descriptor instead.
func (*StreamingQueryInstanceId) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{8}
}

func (x *StreamingQueryInstanceId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamingQueryInstanceId) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

// Commands for a streaming query.
type StreamingQueryCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Query instance. See `StreamingQueryInstanceId`.
	QueryId *StreamingQueryInstanceId `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// See documentation for the corresponding API method in StreamingQuery.
	//
	// Types that are assignable to Command:
	//
	//	*StreamingQueryCommand_Status
	//	*StreamingQueryCommand_LastProgress
	//	*StreamingQueryCommand_RecentProgress
	//	*StreamingQueryCommand_Stop
	//	*StreamingQueryCommand_ProcessAllAvailable
	//	*StreamingQueryCommand_Explain
	//	*StreamingQueryCommand_Exception
	//	*StreamingQueryCommand_AwaitTermination
	Command isStreamingQueryCommand_Command `protobuf_oneof:"command"`
}

func (x *StreamingQueryCommand) Reset() {
	*x = StreamingQueryCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryCommand) ProtoMessage() {}

func (x *StreamingQueryCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryCommand.ProtoReflect.Descriptor instead.
func (*StreamingQueryCommand) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{9}
}

func (x *StreamingQueryCommand) GetQueryId() *StreamingQueryInstanceId {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (m *StreamingQueryCommand) GetCommand() isStreamingQueryCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *StreamingQueryCommand) GetStatus() bool {
	if x, ok := x.GetCommand().(*StreamingQueryCommand_Status); ok {
		return x.Status
	}
	return false
}

func (x *StreamingQueryCommand) GetLastProgress() bool {
	if x, ok := x.GetCommand().(*StreamingQueryCommand_LastProgress); ok {
		return x.LastProgress
	}
	return false
}

func (x *StreamingQueryCommand) GetRecentProgress() bool {
	if x, ok := x.GetCommand().(*StreamingQueryCommand_RecentProgress); ok {
		return x.RecentProgress
	}
	return false
}

func (x *StreamingQueryCommand) GetStop() bool {
	if x, ok := x.GetCommand().(*StreamingQueryCommand_Stop); ok {
		return x.Stop
	}
	return false
}

func (x *StreamingQueryCommand) GetProcessAllAvailable() bool {
	if x, ok := x.GetCommand().(*StreamingQueryCommand_ProcessAllAvailable); ok {
		return x.ProcessAllAvailable
	}
	return false
}

func (x *StreamingQueryCommand) GetExplain() *StreamingQueryCommand_ExplainCommand {
	if x, ok := x.GetCommand().(*StreamingQueryCommand_Explain); ok {
		return x.Explain
	}
	return nil
}

func (x *StreamingQueryCommand) GetException() bool {
	if x, ok := x.GetCommand().(*StreamingQueryCommand_Exception); ok {
		return x.Exception
	}
	return false
}

func (x *StreamingQueryCommand) GetAwaitTermination() *StreamingQueryCommand_AwaitTerminationCommand {
	if x, ok := x.GetCommand().(*StreamingQueryCommand_AwaitTermination); ok {
		return x.AwaitTermination
	}
	return nil
}

type isStreamingQueryCommand_Command interface {
	isStreamingQueryCommand_Command()
}

type StreamingQueryCommand_Status struct {
	// status() API.
	Status bool `protobuf:"varint,2,opt,name=status,proto3,oneof"`
}

type StreamingQueryCommand_LastProgress struct {
	// lastProgress() API.
	LastProgress bool `protobuf:"varint,3,opt,name=last_progress,json=lastProgress,proto3,oneof"`
}

type StreamingQueryCommand_RecentProgress struct {
	// recentProgress() API.
	RecentProgress bool `protobuf:"varint,4,opt,name=recent_progress,json=recentProgress,proto3,oneof"`
}

type StreamingQueryCommand_Stop struct {
	// stop() API. Stops the query.
	Stop bool `protobuf:"varint,5,opt,name=stop,proto3,oneof"`
}

type StreamingQueryCommand_ProcessAllAvailable struct {
	// processAllAvailable() API. Waits till all the available data is processed
	ProcessAllAvailable bool `protobuf:"varint,6,opt,name=process_all_available,json=processAllAvailable,proto3,oneof"`
}

type StreamingQueryCommand_Explain struct {
	// explain() API. Returns logical and physical plans.
	Explain *StreamingQueryCommand_ExplainCommand `protobuf:"bytes,7,opt,name=explain,proto3,oneof"`
}

type StreamingQueryCommand_Exception struct {
	// exception() API. Returns the exception in the query if any.
	Exception bool `protobuf:"varint,8,opt,name=exception,proto3,oneof"`
}

type StreamingQueryCommand_AwaitTermination struct {
	// awaitTermination() API. Waits for the termination of the query.
	AwaitTermination *StreamingQueryCommand_AwaitTerminationCommand `protobuf:"bytes,9,opt,name=await_termination,json=awaitTermination,proto3,oneof"`
}

func (*StreamingQueryCommand_Status) isStreamingQueryCommand_Command() {}

func (*StreamingQueryCommand_LastProgress) isStreamingQueryCommand_Command() {}

func (*StreamingQueryCommand_RecentProgress) isStreamingQueryCommand_Command() {}

func (*StreamingQueryCommand_Stop) isStreamingQueryCommand_Command() {}

func (*StreamingQueryCommand_ProcessAllAvailable) isStreamingQueryCommand_Command() {}

func (*StreamingQueryCommand_Explain) isStreamingQueryCommand_Command() {}

func (*StreamingQueryCommand_Exception) isStreamingQueryCommand_Command() {}

func (*StreamingQueryCommand_AwaitTermination) isStreamingQueryCommand_Command() {}

// Response for commands on a streaming query.
type StreamingQueryCommandResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Query instance id. See `StreamingQueryInstanceId`.
	QueryId *StreamingQueryInstanceId `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Types that are assignable to ResultType:
	//
	//	*StreamingQueryCommandResult_Status
	//	*StreamingQueryCommandResult_RecentProgress
	//	*StreamingQueryCommandResult_Explain
	//	*StreamingQueryCommandResult_Exception
	//	*StreamingQueryCommandResult_AwaitTermination
	ResultType isStreamingQueryCommandResult_ResultType `protobuf_oneof:"result_type"`
}

func (x *StreamingQueryCommandResult) Reset() {
	*x = StreamingQueryCommandResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryCommandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryCommandResult) ProtoMessage() {}

func (x *StreamingQueryCommandResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryCommandResult.ProtoReflect.Descriptor instead.
func (*StreamingQueryCommandResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{10}
}

func (x *StreamingQueryCommandResult) GetQueryId() *StreamingQueryInstanceId {
	if x != nil {
		return x.QueryId
	}
	return nil
}

func (m *StreamingQueryCommandResult) GetResultType() isStreamingQueryCommandResult_ResultType {
	if m != nil {
		return m.ResultType
	}
	return nil
}

func (x *StreamingQueryCommandResult) GetStatus() *StreamingQueryCommandResult_StatusResult {
	if x, ok := x.GetResultType().(*StreamingQueryCommandResult_Status); ok {
		return x.Status
	}
	return nil
}

func (x *StreamingQueryCommandResult) GetRecentProgress() *StreamingQueryCommandResult_RecentProgressResult {
	if x, ok := x.GetResultType().(*StreamingQueryCommandResult_RecentProgress); ok {
		return x.RecentProgress
	}
	return nil
}

func (x *StreamingQueryCommandResult) GetExplain() *StreamingQueryCommandResult_ExplainResult {
	if x, ok := x.GetResultType().(*StreamingQueryCommandResult_Explain); ok {
		return x.Explain
	}
	return nil
}

func (x *StreamingQueryCommandResult) GetException() *StreamingQueryCommandResult_ExceptionResult {
	if x, ok := x.GetResultType().(*StreamingQueryCommandResult_Exception); ok {
		return x.Exception
	}
	return nil
}

func (x *StreamingQueryCommandResult) GetAwaitTermination() *StreamingQueryCommandResult_AwaitTerminationResult {
	if x, ok := x.GetResultType().(*StreamingQueryCommandResult_AwaitTermination); ok {
		return x.AwaitTermination
	}
	return nil
}

type isStreamingQueryCommandResult_ResultType interface {
	isStreamingQueryCommandResult_ResultType()
}

type StreamingQueryCommandResult_Status struct {
	Status *StreamingQueryCommandResult_StatusResult `protobuf:"bytes,2,opt,name=status,proto3,oneof"`
}

type StreamingQueryCommandResult_RecentProgress struct {
	RecentProgress *StreamingQueryCommandResult_RecentProgressResult `protobuf:"bytes,3,opt,name=recent_progress,json=recentProgress,proto3,oneof"`
}

type StreamingQueryCommandResult_Explain struct {
	Explain *StreamingQueryCommandResult_ExplainResult `protobuf:"bytes,4,opt,name=explain,proto3,oneof"`
}

type StreamingQueryCommandResult_Exception struct {
	Exception *StreamingQueryCommandResult_ExceptionResult `protobuf:"bytes,5,opt,name=exception,proto3,oneof"`
}

type StreamingQueryCommandResult_AwaitTermination struct {
	AwaitTermination *StreamingQueryCommandResult_AwaitTerminationResult `protobuf:"bytes,6,opt,name=await_termination,json=awaitTermination,proto3,oneof"`
}

func (*StreamingQueryCommandResult_Status) isStreamingQueryCommandResult_ResultType() {}

func (*StreamingQueryCommandResult_RecentProgress) isStreamingQueryCommandResult_ResultType() {}

func (*StreamingQueryCommandResult_Explain) isStreamingQueryCommandResult_ResultType() {}

func (*StreamingQueryCommandResult_Exception) isStreamingQueryCommandResult_ResultType() {}

func (*StreamingQueryCommandResult_AwaitTermination) isStreamingQueryCommandResult_ResultType() {}

// Commands for the streaming query manager.
type StreamingQueryManagerCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// See documentation for the corresponding API method in StreamingQueryManager.
	//
	// Types that are assignable to Command:
	//
	//	*StreamingQueryManagerCommand_Active
	//	*StreamingQueryManagerCommand_GetQuery
	//	*StreamingQueryManagerCommand_AwaitAnyTermination
	//	*StreamingQueryManagerCommand_ResetTerminated
	//	*StreamingQueryManagerCommand_AddListener
	//	*StreamingQueryManagerCommand_RemoveListener
	//	*StreamingQueryManagerCommand_ListListeners
	Command isStreamingQueryManagerCommand_Command `protobuf_oneof:"command"`
}

func (x *StreamingQueryManagerCommand) Reset() {
	*x = StreamingQueryManagerCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryManagerCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryManagerCommand) ProtoMessage() {}

func (x *StreamingQueryManagerCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryManagerCommand.ProtoReflect.Descriptor instead.
func (*StreamingQueryManagerCommand) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{11}
}

func (m *StreamingQueryManagerCommand) GetCommand() isStreamingQueryManagerCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *StreamingQueryManagerCommand) GetActive() bool {
	if x, ok := x.GetCommand().(*StreamingQueryManagerCommand_Active); ok {
		return x.Active
	}
	return false
}

func (x *StreamingQueryManagerCommand) GetGetQuery() string {
	if x, ok := x.GetCommand().(*StreamingQueryManagerCommand_GetQuery); ok {
		return x.GetQuery
	}
	return ""
}

func (x *StreamingQueryManagerCommand) GetAwaitAnyTermination() *StreamingQueryManagerCommand_AwaitAnyTerminationCommand {
	if x, ok := x.GetCommand().(*StreamingQueryManagerCommand_AwaitAnyTermination); ok {
		return x.AwaitAnyTermination
	}
	return nil
}

func (x *StreamingQueryManagerCommand) GetResetTerminated() bool {
	if x, ok := x.GetCommand().(*StreamingQueryManagerCommand_ResetTerminated); ok {
		return x.ResetTerminated
	}
	return false
}

func (x *StreamingQueryManagerCommand) GetAddListener() *StreamingQueryManagerCommand_StreamingQueryListenerCommand {
	if x, ok := x.GetCommand().(*StreamingQueryManagerCommand_AddListener); ok {
		return x.AddListener
	}
	return nil
}

func (x *StreamingQueryManagerCommand) GetRemoveListener() *StreamingQueryManagerCommand_StreamingQueryListenerCommand {
	if x, ok := x.GetCommand().(*StreamingQueryManagerCommand_RemoveListener); ok {
		return x.RemoveListener
	}
	return nil
}

func (x *StreamingQueryManagerCommand) GetListListeners() bool {
	if x, ok := x.GetCommand().(*StreamingQueryManagerCommand_ListListeners); ok {
		return x.ListListeners
	}
	return false
}

type isStreamingQueryManagerCommand_Command interface {
	isStreamingQueryManagerCommand_Command()
}

type StreamingQueryManagerCommand_Active struct {
	// active() API, returns a list of active queries.
	Active bool `protobuf:"varint,1,opt,name=active,proto3,oneof"`
}

type StreamingQueryManagerCommand_GetQuery struct {
	// get() API, returns the StreamingQuery identified by id.
	GetQuery string `protobuf:"bytes,2,opt,name=get_query,json=getQuery,proto3,oneof"`
}

type StreamingQueryManagerCommand_AwaitAnyTermination struct {
	// awaitAnyTermination() API, wait until any query terminates or timeout.
	AwaitAnyTermination *StreamingQueryManagerCommand_AwaitAnyTerminationCommand `protobuf:"bytes,3,opt,name=await_any_termination,json=awaitAnyTermination,proto3,oneof"`
}

type StreamingQueryManagerCommand_ResetTerminated struct {
	// resetTerminated() API.
	ResetTerminated bool `protobuf:"varint,4,opt,name=reset_terminated,json=resetTerminated,proto3,oneof"`
}

type StreamingQueryManagerCommand_AddListener struct {
	// addListener API.
	AddListener *StreamingQueryManagerCommand_StreamingQueryListenerCommand `protobuf:"bytes,5,opt,name=add_listener,json=addListener,proto3,oneof"`
}

type StreamingQueryManagerCommand_RemoveListener struct {
	// removeListener API.
	RemoveListener *StreamingQueryManagerCommand_StreamingQueryListenerCommand `protobuf:"bytes,6,opt,name=remove_listener,json=removeListener,proto3,oneof"`
}

type StreamingQueryManagerCommand_ListListeners struct {
	// listListeners() API, returns a list of streaming query listeners.
	ListListeners bool `protobuf:"varint,7,opt,name=list_listeners,json=listListeners,proto3,oneof"`
}

func (*StreamingQueryManagerCommand_Active) isStreamingQueryManagerCommand_Command() {}

func (*StreamingQueryManagerCommand_GetQuery) isStreamingQueryManagerCommand_Command() {}

func (*StreamingQueryManagerCommand_AwaitAnyTermination) isStreamingQueryManagerCommand_Command() {}

func (*StreamingQueryManagerCommand_ResetTerminated) isStreamingQueryManagerCommand_Command() {}

func (*StreamingQueryManagerCommand_AddListener) isStreamingQueryManagerCommand_Command() {}

func (*StreamingQueryManagerCommand_RemoveListener) isStreamingQueryManagerCommand_Command() {}

func (*StreamingQueryManagerCommand_ListListeners) isStreamingQueryManagerCommand_Command() {}

// Response for commands on the streaming query manager.
type StreamingQueryManagerCommandResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResultType:
	//
	//	*StreamingQueryManagerCommandResult_Active
	//	*StreamingQueryManagerCommandResult_Query
	//	*StreamingQueryManagerCommandResult_AwaitAnyTermination
	//	*StreamingQueryManagerCommandResult_ResetTerminated
	//	*StreamingQueryManagerCommandResult_AddListener
	//	*StreamingQueryManagerCommandResult_RemoveListener
	//	*StreamingQueryManagerCommandResult_ListListeners
	ResultType isStreamingQueryManagerCommandResult_ResultType `protobuf_oneof:"result_type"`
}

func (x *StreamingQueryManagerCommandResult) Reset() {
	*x = StreamingQueryManagerCommandResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryManagerCommandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryManagerCommandResult) ProtoMessage() {}

func (x *StreamingQueryManagerCommandResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryManagerCommandResult.ProtoReflect.Descriptor instead.
func (*StreamingQueryManagerCommandResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{12}
}

func (m *StreamingQueryManagerCommandResult) GetResultType() isStreamingQueryManagerCommandResult_ResultType {
	if m != nil {
		return m.ResultType
	}
	return nil
}

func (x *StreamingQueryManagerCommandResult) GetActive() *StreamingQueryManagerCommandResult_ActiveResult {
	if x, ok := x.GetResultType().(*StreamingQueryManagerCommandResult_Active); ok {
		return x.Active
	}
	return nil
}

func (x *StreamingQueryManagerCommandResult) GetQuery() *StreamingQueryManagerCommandResult_StreamingQueryInstance {
	if x, ok := x.GetResultType().(*StreamingQueryManagerCommandResult_Query); ok {
		return x.Query
	}
	return nil
}

func (x *StreamingQueryManagerCommandResult) GetAwaitAnyTermination() *StreamingQueryManagerCommandResult_AwaitAnyTerminationResult {
	if x, ok := x.GetResultType().(*StreamingQueryManagerCommandResult_AwaitAnyTermination); ok {
		return x.AwaitAnyTermination
	}
	return nil
}

func (x *StreamingQueryManagerCommandResult) GetResetTerminated() bool {
	if x, ok := x.GetResultType().(*StreamingQueryManagerCommandResult_ResetTerminated); ok {
		return x.ResetTerminated
	}
	return false
}

func (x *StreamingQueryManagerCommandResult) GetAddListener() bool {
	if x, ok := x.GetResultType().(*StreamingQueryManagerCommandResult_AddListener); ok {
		return x.AddListener
	}
	return false
}

func (x *StreamingQueryManagerCommandResult) GetRemoveListener() bool {
	if x, ok := x.GetResultType().(*StreamingQueryManagerCommandResult_RemoveListener); ok {
		return x.RemoveListener
	}
	return false
}

func (x *StreamingQueryManagerCommandResult) GetListListeners() *StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult {
	if x, ok := x.GetResultType().(*StreamingQueryManagerCommandResult_ListListeners); ok {
		return x.ListListeners
	}
	return nil
}

type isStreamingQueryManagerCommandResult_ResultType interface {
	isStreamingQueryManagerCommandResult_ResultType()
}

type StreamingQueryManagerCommandResult_Active struct {
	Active *StreamingQueryManagerCommandResult_ActiveResult `protobuf:"bytes,1,opt,name=active,proto3,oneof"`
}

type StreamingQueryManagerCommandResult_Query struct {
	Query *StreamingQueryManagerCommandResult_StreamingQueryInstance `protobuf:"bytes,2,opt,name=query,proto3,oneof"`
}

type StreamingQueryManagerCommandResult_AwaitAnyTermination struct {
	AwaitAnyTermination *StreamingQueryManagerCommandResult_AwaitAnyTerminationResult `protobuf:"bytes,3,opt,name=await_any_termination,json=awaitAnyTermination,proto3,oneof"`
}

type StreamingQueryManagerCommandResult_ResetTerminated struct {
	ResetTerminated bool `protobuf:"varint,4,opt,name=reset_terminated,json=resetTerminated,proto3,oneof"`
}

type StreamingQueryManagerCommandResult_AddListener struct {
	AddListener bool `protobuf:"varint,5,opt,name=add_listener,json=addListener,proto3,oneof"`
}

type StreamingQueryManagerCommandResult_RemoveListener struct {
	RemoveListener bool `protobuf:"varint,6,opt,name=remove_listener,json=removeListener,proto3,oneof"`
}

type StreamingQueryManagerCommandResult_ListListeners struct {
	ListListeners *StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult `protobuf:"bytes,7,opt,name=list_listeners,json=listListeners,proto3,oneof"`
}

func (*StreamingQueryManagerCommandResult_Active) isStreamingQueryManagerCommandResult_ResultType() {}

func (*StreamingQueryManagerCommandResult_Query) isStreamingQueryManagerCommandResult_ResultType() {}

func (*StreamingQueryManagerCommandResult_AwaitAnyTermination) isStreamingQueryManagerCommandResult_ResultType() {
}

func (*StreamingQueryManagerCommandResult_ResetTerminated) isStreamingQueryManagerCommandResult_ResultType() {
}

func (*StreamingQueryManagerCommandResult_AddListener) isStreamingQueryManagerCommandResult_ResultType() {
}

func (*StreamingQueryManagerCommandResult_RemoveListener) isStreamingQueryManagerCommandResult_ResultType() {
}

func (*StreamingQueryManagerCommandResult_ListListeners) isStreamingQueryManagerCommandResult_ResultType() {
}

// Command to get the output of 'SparkContext.resources'
type GetResourcesCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetResourcesCommand) Reset() {
	*x = GetResourcesCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcesCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcesCommand) ProtoMessage() {}

func (x *GetResourcesCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcesCommand.ProtoReflect.Descriptor instead.
func (*GetResourcesCommand) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{13}
}

// Response for command 'GetResourcesCommand'.
type GetResourcesCommandResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources map[string]*ResourceInformation `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetResourcesCommandResult) Reset() {
	*x = GetResourcesCommandResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcesCommandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcesCommandResult) ProtoMessage() {}

func (x *GetResourcesCommandResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcesCommandResult.ProtoReflect.Descriptor instead.
func (*GetResourcesCommandResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{14}
}

func (x *GetResourcesCommandResult) GetResources() map[string]*ResourceInformation {
	if x != nil {
		return x.Resources
	}
	return nil
}

type WriteOperation_SaveTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) The table name.
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// (Required) The method to be called to write to the table.
	SaveMethod WriteOperation_SaveTable_TableSaveMethod `protobuf:"varint,2,opt,name=save_method,json=saveMethod,proto3,enum=spark.connect.WriteOperation_SaveTable_TableSaveMethod" json:"save_method,omitempty"`
}

func (x *WriteOperation_SaveTable) Reset() {
	*x = WriteOperation_SaveTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteOperation_SaveTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteOperation_SaveTable) ProtoMessage() {}

func (x *WriteOperation_SaveTable) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteOperation_SaveTable.ProtoReflect.Descriptor instead.
func (*WriteOperation_SaveTable) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{3, 1}
}

func (x *WriteOperation_SaveTable) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *WriteOperation_SaveTable) GetSaveMethod() WriteOperation_SaveTable_TableSaveMethod {
	if x != nil {
		return x.SaveMethod
	}
	return WriteOperation_SaveTable_TABLE_SAVE_METHOD_UNSPECIFIED
}

type WriteOperation_BucketBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketColumnNames []string `protobuf:"bytes,1,rep,name=bucket_column_names,json=bucketColumnNames,proto3" json:"bucket_column_names,omitempty"`
	NumBuckets        int32    `protobuf:"varint,2,opt,name=num_buckets,json=numBuckets,proto3" json:"num_buckets,omitempty"`
}

func (x *WriteOperation_BucketBy) Reset() {
	*x = WriteOperation_BucketBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteOperation_BucketBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteOperation_BucketBy) ProtoMessage() {}

func (x *WriteOperation_BucketBy) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteOperation_BucketBy.ProtoReflect.Descriptor instead.
func (*WriteOperation_BucketBy) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{3, 2}
}

func (x *WriteOperation_BucketBy) GetBucketColumnNames() []string {
	if x != nil {
		return x.BucketColumnNames
	}
	return nil
}

func (x *WriteOperation_BucketBy) GetNumBuckets() int32 {
	if x != nil {
		return x.NumBuckets
	}
	return 0
}

type StreamingQueryCommand_ExplainCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Consider reusing Explain from AnalyzePlanRequest message.
	//
	//	We can not do this right now since it base.proto imports this file.
	Extended bool `protobuf:"varint,1,opt,name=extended,proto3" json:"extended,omitempty"`
}

func (x *StreamingQueryCommand_ExplainCommand) Reset() {
	*x = StreamingQueryCommand_ExplainCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryCommand_ExplainCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryCommand_ExplainCommand) ProtoMessage() {}

func (x *StreamingQueryCommand_ExplainCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryCommand_ExplainCommand.ProtoReflect.Descriptor instead.
func (*StreamingQueryCommand_ExplainCommand) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{9, 0}
}

func (x *StreamingQueryCommand_ExplainCommand) GetExtended() bool {
	if x != nil {
		return x.Extended
	}
	return false
}

type StreamingQueryCommand_AwaitTerminationCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeoutMs *int64 `protobuf:"varint,2,opt,name=timeout_ms,json=timeoutMs,proto3,oneof" json:"timeout_ms,omitempty"`
}

func (x *StreamingQueryCommand_AwaitTerminationCommand) Reset() {
	*x = StreamingQueryCommand_AwaitTerminationCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryCommand_AwaitTerminationCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryCommand_AwaitTerminationCommand) ProtoMessage() {}

func (x *StreamingQueryCommand_AwaitTerminationCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryCommand_AwaitTerminationCommand.ProtoReflect.Descriptor instead.
func (*StreamingQueryCommand_AwaitTerminationCommand) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{9, 1}
}

func (x *StreamingQueryCommand_AwaitTerminationCommand) GetTimeoutMs() int64 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

type StreamingQueryCommandResult_StatusResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// See documentation for these Scala 'StreamingQueryStatus' struct
	StatusMessage   string `protobuf:"bytes,1,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	IsDataAvailable bool   `protobuf:"varint,2,opt,name=is_data_available,json=isDataAvailable,proto3" json:"is_data_available,omitempty"`
	IsTriggerActive bool   `protobuf:"varint,3,opt,name=is_trigger_active,json=isTriggerActive,proto3" json:"is_trigger_active,omitempty"`
	IsActive        bool   `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *StreamingQueryCommandResult_StatusResult) Reset() {
	*x = StreamingQueryCommandResult_StatusResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryCommandResult_StatusResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryCommandResult_StatusResult) ProtoMessage() {}

func (x *StreamingQueryCommandResult_StatusResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryCommandResult_StatusResult.ProtoReflect.Descriptor instead.
func (*StreamingQueryCommandResult_StatusResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{10, 0}
}

func (x *StreamingQueryCommandResult_StatusResult) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *StreamingQueryCommandResult_StatusResult) GetIsDataAvailable() bool {
	if x != nil {
		return x.IsDataAvailable
	}
	return false
}

func (x *StreamingQueryCommandResult_StatusResult) GetIsTriggerActive() bool {
	if x != nil {
		return x.IsTriggerActive
	}
	return false
}

func (x *StreamingQueryCommandResult_StatusResult) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type StreamingQueryCommandResult_RecentProgressResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Progress reports as an array of json strings.
	RecentProgressJson []string `protobuf:"bytes,5,rep,name=recent_progress_json,json=recentProgressJson,proto3" json:"recent_progress_json,omitempty"`
}

func (x *StreamingQueryCommandResult_RecentProgressResult) Reset() {
	*x = StreamingQueryCommandResult_RecentProgressResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryCommandResult_RecentProgressResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryCommandResult_RecentProgressResult) ProtoMessage() {}

func (x *StreamingQueryCommandResult_RecentProgressResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryCommandResult_RecentProgressResult.ProtoReflect.Descriptor instead.
func (*StreamingQueryCommandResult_RecentProgressResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{10, 1}
}

func (x *StreamingQueryCommandResult_RecentProgressResult) GetRecentProgressJson() []string {
	if x != nil {
		return x.RecentProgressJson
	}
	return nil
}

type StreamingQueryCommandResult_ExplainResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical and physical plans as string
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *StreamingQueryCommandResult_ExplainResult) Reset() {
	*x = StreamingQueryCommandResult_ExplainResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryCommandResult_ExplainResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryCommandResult_ExplainResult) ProtoMessage() {}

func (x *StreamingQueryCommandResult_ExplainResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryCommandResult_ExplainResult.ProtoReflect.Descriptor instead.
func (*StreamingQueryCommandResult_ExplainResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{10, 2}
}

func (x *StreamingQueryCommandResult_ExplainResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type StreamingQueryCommandResult_ExceptionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Optional) Exception message as string, maps to the return value of original
	// StreamingQueryException's toString method
	ExceptionMessage *string `protobuf:"bytes,1,opt,name=exception_message,json=exceptionMessage,proto3,oneof" json:"exception_message,omitempty"`
	// (Optional) Exception error class as string
	ErrorClass *string `protobuf:"bytes,2,opt,name=error_class,json=errorClass,proto3,oneof" json:"error_class,omitempty"`
	// (Optional) Exception stack trace as string
	StackTrace *string `protobuf:"bytes,3,opt,name=stack_trace,json=stackTrace,proto3,oneof" json:"stack_trace,omitempty"`
}

func (x *StreamingQueryCommandResult_ExceptionResult) Reset() {
	*x = StreamingQueryCommandResult_ExceptionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryCommandResult_ExceptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryCommandResult_ExceptionResult) ProtoMessage() {}

func (x *StreamingQueryCommandResult_ExceptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryCommandResult_ExceptionResult.ProtoReflect.Descriptor instead.
func (*StreamingQueryCommandResult_ExceptionResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{10, 3}
}

func (x *StreamingQueryCommandResult_ExceptionResult) GetExceptionMessage() string {
	if x != nil && x.ExceptionMessage != nil {
		return *x.ExceptionMessage
	}
	return ""
}

func (x *StreamingQueryCommandResult_ExceptionResult) GetErrorClass() string {
	if x != nil && x.ErrorClass != nil {
		return *x.ErrorClass
	}
	return ""
}

func (x *StreamingQueryCommandResult_ExceptionResult) GetStackTrace() string {
	if x != nil && x.StackTrace != nil {
		return *x.StackTrace
	}
	return ""
}

type StreamingQueryCommandResult_AwaitTerminationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terminated bool `protobuf:"varint,1,opt,name=terminated,proto3" json:"terminated,omitempty"`
}

func (x *StreamingQueryCommandResult_AwaitTerminationResult) Reset() {
	*x = StreamingQueryCommandResult_AwaitTerminationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryCommandResult_AwaitTerminationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryCommandResult_AwaitTerminationResult) ProtoMessage() {}

func (x *StreamingQueryCommandResult_AwaitTerminationResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryCommandResult_AwaitTerminationResult.ProtoReflect.Descriptor instead.
func (*StreamingQueryCommandResult_AwaitTerminationResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{10, 4}
}

func (x *StreamingQueryCommandResult_AwaitTerminationResult) GetTerminated() bool {
	if x != nil {
		return x.Terminated
	}
	return false
}

type StreamingQueryManagerCommand_AwaitAnyTerminationCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Optional) The waiting time in milliseconds to wait for any query to terminate.
	TimeoutMs *int64 `protobuf:"varint,1,opt,name=timeout_ms,json=timeoutMs,proto3,oneof" json:"timeout_ms,omitempty"`
}

func (x *StreamingQueryManagerCommand_AwaitAnyTerminationCommand) Reset() {
	*x = StreamingQueryManagerCommand_AwaitAnyTerminationCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryManagerCommand_AwaitAnyTerminationCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryManagerCommand_AwaitAnyTerminationCommand) ProtoMessage() {}

func (x *StreamingQueryManagerCommand_AwaitAnyTerminationCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryManagerCommand_AwaitAnyTerminationCommand.ProtoReflect.Descriptor instead.
func (*StreamingQueryManagerCommand_AwaitAnyTerminationCommand) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{11, 0}
}

func (x *StreamingQueryManagerCommand_AwaitAnyTerminationCommand) GetTimeoutMs() int64 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

type StreamingQueryManagerCommand_StreamingQueryListenerCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListenerPayload       []byte     `protobuf:"bytes,1,opt,name=listener_payload,json=listenerPayload,proto3" json:"listener_payload,omitempty"`
	PythonListenerPayload *PythonUDF `protobuf:"bytes,2,opt,name=python_listener_payload,json=pythonListenerPayload,proto3,oneof" json:"python_listener_payload,omitempty"`
	Id                    string     `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StreamingQueryManagerCommand_StreamingQueryListenerCommand) Reset() {
	*x = StreamingQueryManagerCommand_StreamingQueryListenerCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryManagerCommand_StreamingQueryListenerCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryManagerCommand_StreamingQueryListenerCommand) ProtoMessage() {}

func (x *StreamingQueryManagerCommand_StreamingQueryListenerCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryManagerCommand_StreamingQueryListenerCommand.ProtoReflect.Descriptor instead.
func (*StreamingQueryManagerCommand_StreamingQueryListenerCommand) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{11, 1}
}

func (x *StreamingQueryManagerCommand_StreamingQueryListenerCommand) GetListenerPayload() []byte {
	if x != nil {
		return x.ListenerPayload
	}
	return nil
}

func (x *StreamingQueryManagerCommand_StreamingQueryListenerCommand) GetPythonListenerPayload() *PythonUDF {
	if x != nil {
		return x.PythonListenerPayload
	}
	return nil
}

func (x *StreamingQueryManagerCommand_StreamingQueryListenerCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StreamingQueryManagerCommandResult_ActiveResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveQueries []*StreamingQueryManagerCommandResult_StreamingQueryInstance `protobuf:"bytes,1,rep,name=active_queries,json=activeQueries,proto3" json:"active_queries,omitempty"`
}

func (x *StreamingQueryManagerCommandResult_ActiveResult) Reset() {
	*x = StreamingQueryManagerCommandResult_ActiveResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryManagerCommandResult_ActiveResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryManagerCommandResult_ActiveResult) ProtoMessage() {}

func (x *StreamingQueryManagerCommandResult_ActiveResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryManagerCommandResult_ActiveResult.ProtoReflect.Descriptor instead.
func (*StreamingQueryManagerCommandResult_ActiveResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{12, 0}
}

func (x *StreamingQueryManagerCommandResult_ActiveResult) GetActiveQueries() []*StreamingQueryManagerCommandResult_StreamingQueryInstance {
	if x != nil {
		return x.ActiveQueries
	}
	return nil
}

type StreamingQueryManagerCommandResult_StreamingQueryInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) The id and runId of this query.
	Id *StreamingQueryInstanceId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// (Optional) The name of this query.
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *StreamingQueryManagerCommandResult_StreamingQueryInstance) Reset() {
	*x = StreamingQueryManagerCommandResult_StreamingQueryInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryManagerCommandResult_StreamingQueryInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryManagerCommandResult_StreamingQueryInstance) ProtoMessage() {}

func (x *StreamingQueryManagerCommandResult_StreamingQueryInstance) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryManagerCommandResult_StreamingQueryInstance.ProtoReflect.Descriptor instead.
func (*StreamingQueryManagerCommandResult_StreamingQueryInstance) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{12, 1}
}

func (x *StreamingQueryManagerCommandResult_StreamingQueryInstance) GetId() *StreamingQueryInstanceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StreamingQueryManagerCommandResult_StreamingQueryInstance) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type StreamingQueryManagerCommandResult_AwaitAnyTerminationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terminated bool `protobuf:"varint,1,opt,name=terminated,proto3" json:"terminated,omitempty"`
}

func (x *StreamingQueryManagerCommandResult_AwaitAnyTerminationResult) Reset() {
	*x = StreamingQueryManagerCommandResult_AwaitAnyTerminationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryManagerCommandResult_AwaitAnyTerminationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryManagerCommandResult_AwaitAnyTerminationResult) ProtoMessage() {}

func (x *StreamingQueryManagerCommandResult_AwaitAnyTerminationResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryManagerCommandResult_AwaitAnyTerminationResult.ProtoReflect.Descriptor instead.
func (*StreamingQueryManagerCommandResult_AwaitAnyTerminationResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{12, 2}
}

func (x *StreamingQueryManagerCommandResult_AwaitAnyTerminationResult) GetTerminated() bool {
	if x != nil {
		return x.Terminated
	}
	return false
}

type StreamingQueryManagerCommandResult_StreamingQueryListenerInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListenerPayload []byte `protobuf:"bytes,1,opt,name=listener_payload,json=listenerPayload,proto3" json:"listener_payload,omitempty"`
}

func (x *StreamingQueryManagerCommandResult_StreamingQueryListenerInstance) Reset() {
	*x = StreamingQueryManagerCommandResult_StreamingQueryListenerInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryManagerCommandResult_StreamingQueryListenerInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryManagerCommandResult_StreamingQueryListenerInstance) ProtoMessage() {}

func (x *StreamingQueryManagerCommandResult_StreamingQueryListenerInstance) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryManagerCommandResult_StreamingQueryListenerInstance.ProtoReflect.Descriptor instead.
func (*StreamingQueryManagerCommandResult_StreamingQueryListenerInstance) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{12, 3}
}

func (x *StreamingQueryManagerCommandResult_StreamingQueryListenerInstance) GetListenerPayload() []byte {
	if x != nil {
		return x.ListenerPayload
	}
	return nil
}

type StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Reference IDs of listener instances.
	ListenerIds []string `protobuf:"bytes,1,rep,name=listener_ids,json=listenerIds,proto3" json:"listener_ids,omitempty"`
}

func (x *StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult) Reset() {
	*x = StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_commands_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult) ProtoMessage() {}

func (x *StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_commands_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult.ProtoReflect.Descriptor instead.
func (*StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_commands_proto_rawDescGZIP(), []int{12, 4}
}

func (x *StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult) GetListenerIds() []string {
	if x != nil {
		return x.ListenerIds
	}
	return nil
}

var File_spark_connect_commands_proto protoreflect.FileDescriptor

var file_spark_connect_commands_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x07, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x5d, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x15, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x4f, 0x0a, 0x12, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x48, 0x00, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x3c, 0x0a, 0x0b, 0x73,
	0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x71, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x6b, 0x0a, 0x1c, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x19, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x5e, 0x0a, 0x17, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x15, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x58, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x74, 0x0a, 0x1f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x6d, 0x0a, 0x17, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0xe7, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf1, 0x01, 0x0a,
	0x0a, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x37, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x6f, 0x73,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x96, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x9b, 0x08, 0x0a, 0x0e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3f,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x3a, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x79, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x12,
	0x44, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x82, 0x02, 0x0a, 0x09, 0x53, 0x61, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58,
	0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x73, 0x61,
	0x76, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x7c, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x1d, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x41, 0x56,
	0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f,
	0x49, 0x4e, 0x54, 0x4f, 0x10, 0x02, 0x1a, 0x5b, 0x0a, 0x08, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x42, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x41, 0x56, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41,
	0x56, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x46,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x41, 0x56,
	0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x04, 0x42,
	0x0b, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xad, 0x06, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x2d, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x5f, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x13,
	0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x01, 0x0a, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x06, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xa0, 0x06, 0x0a, 0x19, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4f, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x17, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x16, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x04,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1f, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x46, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a,
	0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a, 0x18, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x70, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x55, 0x44, 0x46, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0e,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x55, 0x44, 0x46, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x79, 0x0a, 0x1f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x18, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0xf8,
	0x04, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x34,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x11, 0x61, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x77, 0x61, 0x69, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x10, 0x61, 0x77, 0x61, 0x69, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x2c, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x1a, 0x4c, 0x0a, 0x17, 0x41, 0x77, 0x61, 0x69, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xf5, 0x08, 0x0a, 0x1b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x6a, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x07,
	0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x12, 0x5a, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70,
	0x0a, 0x11, 0x61, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x77, 0x61, 0x69, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x61, 0x77, 0x61, 0x69, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xaa, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x48, 0x0a,
	0x14, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x1a, 0x27, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x1a, 0xc5, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x10, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x1a, 0x38, 0x0a, 0x16, 0x41, 0x77, 0x61, 0x69,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xbd, 0x06, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x67, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x7c, 0x0a, 0x15, 0x61,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x77, 0x61, 0x69, 0x74, 0x41, 0x6e, 0x79,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x13, 0x61, 0x77, 0x61, 0x69, 0x74, 0x41, 0x6e, 0x79, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0e,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0x4f, 0x0a, 0x1a, 0x41, 0x77, 0x61, 0x69, 0x74, 0x41, 0x6e,
	0x79, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x1a, 0xcd, 0x01, 0x0a, 0x1d, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x55, 0x0a, 0x17, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x55, 0x44, 0x46, 0x48, 0x00,
	0x52, 0x15, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x70,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x22, 0xb4, 0x08, 0x0a, 0x22, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x60, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x15, 0x61, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x61,
	0x6e, 0x79, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x77, 0x61, 0x69, 0x74, 0x41, 0x6e, 0x79,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x13, 0x61, 0x77, 0x61, 0x69, 0x74, 0x41, 0x6e, 0x79, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x7b, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x1a, 0x7f, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x6f, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x1a, 0x73, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x3b, 0x0a, 0x19, 0x41, 0x77, 0x61, 0x69,
	0x74, 0x41, 0x6e, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x4b, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x1a, 0x45, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0xd4, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x1a, 0x60, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x36, 0x0a, 0x1e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x12, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spark_connect_commands_proto_rawDescOnce sync.Once
	file_spark_connect_commands_proto_rawDescData = file_spark_connect_commands_proto_rawDesc
)

func file_spark_connect_commands_proto_rawDescGZIP() []byte {
	file_spark_connect_commands_proto_rawDescOnce.Do(func() {
		file_spark_connect_commands_proto_rawDescData = protoimpl.X.CompressGZIP(file_spark_connect_commands_proto_rawDescData)
	})
	return file_spark_connect_commands_proto_rawDescData
}

var file_spark_connect_commands_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_spark_connect_commands_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_spark_connect_commands_proto_goTypes = []interface{}{
	(WriteOperation_SaveMode)(0),                  // 0: spark.connect.WriteOperation.SaveMode
	(WriteOperation_SaveTable_TableSaveMethod)(0), // 1: spark.connect.WriteOperation.SaveTable.TableSaveMethod
	(WriteOperationV2_Mode)(0),                    // 2: spark.connect.WriteOperationV2.Mode
	(*Command)(nil),                               // 3: spark.connect.Command
	(*SqlCommand)(nil),                            // 4: spark.connect.SqlCommand
	(*CreateDataFrameViewCommand)(nil),            // 5: spark.connect.CreateDataFrameViewCommand
	(*WriteOperation)(nil),                        // 6: spark.connect.WriteOperation
	(*WriteOperationV2)(nil),                      // 7: spark.connect.WriteOperationV2
	(*WriteStreamOperationStart)(nil),             // 8: spark.connect.WriteStreamOperationStart
	(*StreamingForeachFunction)(nil),              // 9: spark.connect.StreamingForeachFunction
	(*WriteStreamOperationStartResult)(nil),       // 10: spark.connect.WriteStreamOperationStartResult
	(*StreamingQueryInstanceId)(nil),              // 11: spark.connect.StreamingQueryInstanceId
	(*StreamingQueryCommand)(nil),                 // 12: spark.connect.StreamingQueryCommand
	(*StreamingQueryCommandResult)(nil),           // 13: spark.connect.StreamingQueryCommandResult
	(*StreamingQueryManagerCommand)(nil),          // 14: spark.connect.StreamingQueryManagerCommand
	(*StreamingQueryManagerCommandResult)(nil),    // 15: spark.connect.StreamingQueryManagerCommandResult
	(*GetResourcesCommand)(nil),                   // 16: spark.connect.GetResourcesCommand
	(*GetResourcesCommandResult)(nil),             // 17: spark.connect.GetResourcesCommandResult
	nil,                                           // 18: spark.connect.SqlCommand.ArgsEntry
	nil,                                           // 19: spark.connect.WriteOperation.OptionsEntry
	(*WriteOperation_SaveTable)(nil),              // 20: spark.connect.WriteOperation.SaveTable
	(*WriteOperation_BucketBy)(nil),               // 21: spark.connect.WriteOperation.BucketBy
	nil,                                           // 22: spark.connect.WriteOperationV2.OptionsEntry
	nil,                                           // 23: spark.connect.WriteOperationV2.TablePropertiesEntry
	nil,                                           // 24: spark.connect.WriteStreamOperationStart.OptionsEntry
	(*StreamingQueryCommand_ExplainCommand)(nil),  // 25: spark.connect.StreamingQueryCommand.ExplainCommand
	(*StreamingQueryCommand_AwaitTerminationCommand)(nil),                       // 26: spark.connect.StreamingQueryCommand.AwaitTerminationCommand
	(*StreamingQueryCommandResult_StatusResult)(nil),                            // 27: spark.connect.StreamingQueryCommandResult.StatusResult
	(*StreamingQueryCommandResult_RecentProgressResult)(nil),                    // 28: spark.connect.StreamingQueryCommandResult.RecentProgressResult
	(*StreamingQueryCommandResult_ExplainResult)(nil),                           // 29: spark.connect.StreamingQueryCommandResult.ExplainResult
	(*StreamingQueryCommandResult_ExceptionResult)(nil),                         // 30: spark.connect.StreamingQueryCommandResult.ExceptionResult
	(*StreamingQueryCommandResult_AwaitTerminationResult)(nil),                  // 31: spark.connect.StreamingQueryCommandResult.AwaitTerminationResult
	(*StreamingQueryManagerCommand_AwaitAnyTerminationCommand)(nil),             // 32: spark.connect.StreamingQueryManagerCommand.AwaitAnyTerminationCommand
	(*StreamingQueryManagerCommand_StreamingQueryListenerCommand)(nil),          // 33: spark.connect.StreamingQueryManagerCommand.StreamingQueryListenerCommand
	(*StreamingQueryManagerCommandResult_ActiveResult)(nil),                     // 34: spark.connect.StreamingQueryManagerCommandResult.ActiveResult
	(*StreamingQueryManagerCommandResult_StreamingQueryInstance)(nil),           // 35: spark.connect.StreamingQueryManagerCommandResult.StreamingQueryInstance
	(*StreamingQueryManagerCommandResult_AwaitAnyTerminationResult)(nil),        // 36: spark.connect.StreamingQueryManagerCommandResult.AwaitAnyTerminationResult
	(*StreamingQueryManagerCommandResult_StreamingQueryListenerInstance)(nil),   // 37: spark.connect.StreamingQueryManagerCommandResult.StreamingQueryListenerInstance
	(*StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult)(nil), // 38: spark.connect.StreamingQueryManagerCommandResult.ListStreamingQueryListenerResult
	nil,                                     // 39: spark.connect.GetResourcesCommandResult.ResourcesEntry
	(*CommonInlineUserDefinedFunction)(nil), // 40: spark.connect.CommonInlineUserDefinedFunction
	(*CommonInlineUserDefinedTableFunction)(nil), // 41: spark.connect.CommonInlineUserDefinedTableFunction
	(*anypb.Any)(nil),           // 42: google.protobuf.Any
	(*Expression_Literal)(nil),  // 43: spark.connect.Expression.Literal
	(*Relation)(nil),            // 44: spark.connect.Relation
	(*Expression)(nil),          // 45: spark.connect.Expression
	(*PythonUDF)(nil),           // 46: spark.connect.PythonUDF
	(*ScalarScalaUDF)(nil),      // 47: spark.connect.ScalarScalaUDF
	(*ResourceInformation)(nil), // 48: spark.connect.ResourceInformation
}
var file_spark_connect_commands_proto_depIdxs = []int32{
	40, // 0: spark.connect.Command.register_function:type_name -> spark.connect.CommonInlineUserDefinedFunction
	6,  // 1: spark.connect.Command.write_operation:type_name -> spark.connect.WriteOperation
	5,  // 2: spark.connect.Command.create_dataframe_view:type_name -> spark.connect.CreateDataFrameViewCommand
	7,  // 3: spark.connect.Command.write_operation_v2:type_name -> spark.connect.WriteOperationV2
	4,  // 4: spark.connect.Command.sql_command:type_name -> spark.connect.SqlCommand
	8,  // 5: spark.connect.Command.write_stream_operation_start:type_name -> spark.connect.WriteStreamOperationStart
	12, // 6: spark.connect.Command.streaming_query_command:type_name -> spark.connect.StreamingQueryCommand
	16, // 7: spark.connect.Command.get_resources_command:type_name -> spark.connect.GetResourcesCommand
	14, // 8: spark.connect.Command.streaming_query_manager_command:type_name -> spark.connect.StreamingQueryManagerCommand
	41, // 9: spark.connect.Command.register_table_function:type_name -> spark.connect.CommonInlineUserDefinedTableFunction
	42, // 10: spark.connect.Command.extension:type_name -> google.protobuf.Any
	18, // 11: spark.connect.SqlCommand.args:type_name -> spark.connect.SqlCommand.ArgsEntry
	43, // 12: spark.connect.SqlCommand.pos_args:type_name -> spark.connect.Expression.Literal
	44, // 13: spark.connect.CreateDataFrameViewCommand.input:type_name -> spark.connect.Relation
	44, // 14: spark.connect.WriteOperation.input:type_name -> spark.connect.Relation
	20, // 15: spark.connect.WriteOperation.table:type_name -> spark.connect.WriteOperation.SaveTable
	0,  // 16: spark.connect.WriteOperation.mode:type_name -> spark.connect.WriteOperation.SaveMode
	21, // 17: spark.connect.WriteOperation.bucket_by:type_name -> spark.connect.WriteOperation.BucketBy
	19, // 18: spark.connect.WriteOperation.options:type_name -> spark.connect.WriteOperation.OptionsEntry
	44, // 19: spark.connect.WriteOperationV2.input:type_name -> spark.connect.Relation
	45, // 20: spark.connect.WriteOperationV2.partitioning_columns:type_name -> spark.connect.Expression
	22, // 21: spark.connect.WriteOperationV2.options:type_name -> spark.connect.WriteOperationV2.OptionsEntry
	23, // 22: spark.connect.WriteOperationV2.table_properties:type_name -> spark.connect.WriteOperationV2.TablePropertiesEntry
	2,  // 23: spark.connect.WriteOperationV2.mode:type_name -> spark.connect.WriteOperationV2.Mode
	45, // 24: spark.connect.WriteOperationV2.overwrite_condition:type_name -> spark.connect.Expression
	44, // 25: spark.connect.WriteStreamOperationStart.input:type_name -> spark.connect.Relation
	24, // 26: spark.connect.WriteStreamOperationStart.options:type_name -> spark.connect.WriteStreamOperationStart.OptionsEntry
	9,  // 27: spark.connect.WriteStreamOperationStart.foreach_writer:type_name -> spark.connect.StreamingForeachFunction
	9,  // 28: spark.connect.WriteStreamOperationStart.foreach_batch:type_name -> spark.connect.StreamingForeachFunction
	46, // 29: spark.connect.StreamingForeachFunction.python_function:type_name -> spark.connect.PythonUDF
	47, // 30: spark.connect.StreamingForeachFunction.scala_function:type_name -> spark.connect.ScalarScalaUDF
	11, // 31: spark.connect.WriteStreamOperationStartResult.query_id:type_name -> spark.connect.StreamingQueryInstanceId
	11, // 32: spark.connect.StreamingQueryCommand.query_id:type_name -> spark.connect.StreamingQueryInstanceId
	25, // 33: spark.connect.StreamingQueryCommand.explain:type_name -> spark.connect.StreamingQueryCommand.ExplainCommand
	26, // 34: spark.connect.StreamingQueryCommand.await_termination:type_name -> spark.connect.StreamingQueryCommand.AwaitTerminationCommand
	11, // 35: spark.connect.StreamingQueryCommandResult.query_id:type_name -> spark.connect.StreamingQueryInstanceId
	27, // 36: spark.connect.StreamingQueryCommandResult.status:type_name -> spark.connect.StreamingQueryCommandResult.StatusResult
	28, // 37: spark.connect.StreamingQueryCommandResult.recent_progress:type_name -> spark.connect.StreamingQueryCommandResult.RecentProgressResult
	29, // 38: spark.connect.StreamingQueryCommandResult.explain:type_name -> spark.connect.StreamingQueryCommandResult.ExplainResult
	30, // 39: spark.connect.StreamingQueryCommandResult.exception:type_name -> spark.connect.StreamingQueryCommandResult.ExceptionResult
	31, // 40: spark.connect.StreamingQueryCommandResult.await_termination:type_name -> spark.connect.StreamingQueryCommandResult.AwaitTerminationResult
	32, // 41: spark.connect.StreamingQueryManagerCommand.await_any_termination:type_name -> spark.connect.StreamingQueryManagerCommand.AwaitAnyTerminationCommand
	33, // 42: spark.connect.StreamingQueryManagerCommand.add_listener:type_name -> spark.connect.StreamingQueryManagerCommand.StreamingQueryListenerCommand
	33, // 43: spark.connect.StreamingQueryManagerCommand.remove_listener:type_name -> spark.connect.StreamingQueryManagerCommand.StreamingQueryListenerCommand
	34, // 44: spark.connect.StreamingQueryManagerCommandResult.active:type_name -> spark.connect.StreamingQueryManagerCommandResult.ActiveResult
	35, // 45: spark.connect.StreamingQueryManagerCommandResult.query:type_name -> spark.connect.StreamingQueryManagerCommandResult.StreamingQueryInstance
	36, // 46: spark.connect.StreamingQueryManagerCommandResult.await_any_termination:type_name -> spark.connect.StreamingQueryManagerCommandResult.AwaitAnyTerminationResult
	38, // 47: spark.connect.StreamingQueryManagerCommandResult.list_listeners:type_name -> spark.connect.StreamingQueryManagerCommandResult.ListStreamingQueryListenerResult
	39, // 48: spark.connect.GetResourcesCommandResult.resources:type_name -> spark.connect.GetResourcesCommandResult.ResourcesEntry
	43, // 49: spark.connect.SqlCommand.ArgsEntry.value:type_name -> spark.connect.Expression.Literal
	1,  // 50: spark.connect.WriteOperation.SaveTable.save_method:type_name -> spark.connect.WriteOperation.SaveTable.TableSaveMethod
	46, // 51: spark.connect.StreamingQueryManagerCommand.StreamingQueryListenerCommand.python_listener_payload:type_name -> spark.connect.PythonUDF
	35, // 52: spark.connect.StreamingQueryManagerCommandResult.ActiveResult.active_queries:type_name -> spark.connect.StreamingQueryManagerCommandResult.StreamingQueryInstance
	11, // 53: spark.connect.StreamingQueryManagerCommandResult.StreamingQueryInstance.id:type_name -> spark.connect.StreamingQueryInstanceId
	48, // 54: spark.connect.GetResourcesCommandResult.ResourcesEntry.value:type_name -> spark.connect.ResourceInformation
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_spark_connect_commands_proto_init() }
func file_spark_connect_commands_proto_init() {
	if File_spark_connect_commands_proto != nil {
		return
	}
	file_spark_connect_common_proto_init()
	file_spark_connect_expressions_proto_init()
	file_spark_connect_relations_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spark_connect_commands_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataFrameViewCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteOperationV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteStreamOperationStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingForeachFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteStreamOperationStartResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryInstanceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryCommandResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryManagerCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryManagerCommandResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcesCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcesCommandResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteOperation_SaveTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteOperation_BucketBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryCommand_ExplainCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryCommand_AwaitTerminationCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryCommandResult_StatusResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryCommandResult_RecentProgressResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryCommandResult_ExplainResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryCommandResult_ExceptionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryCommandResult_AwaitTerminationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryManagerCommand_AwaitAnyTerminationCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryManagerCommand_StreamingQueryListenerCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryManagerCommandResult_ActiveResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryManagerCommandResult_StreamingQueryInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryManagerCommandResult_AwaitAnyTerminationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryManagerCommandResult_StreamingQueryListenerInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_commands_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingQueryManagerCommandResult_ListStreamingQueryListenerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spark_connect_commands_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Command_RegisterFunction)(nil),
		(*Command_WriteOperation)(nil),
		(*Command_CreateDataframeView)(nil),
		(*Command_WriteOperationV2)(nil),
		(*Command_SqlCommand)(nil),
		(*Command_WriteStreamOperationStart)(nil),
		(*Command_StreamingQueryCommand)(nil),
		(*Command_GetResourcesCommand)(nil),
		(*Command_StreamingQueryManagerCommand)(nil),
		(*Command_RegisterTableFunction)(nil),
		(*Command_Extension)(nil),
	}
	file_spark_connect_commands_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*WriteOperation_Path)(nil),
		(*WriteOperation_Table)(nil),
	}
	file_spark_connect_commands_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_spark_connect_commands_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*WriteStreamOperationStart_ProcessingTimeInterval)(nil),
		(*WriteStreamOperationStart_AvailableNow)(nil),
		(*WriteStreamOperationStart_Once)(nil),
		(*WriteStreamOperationStart_ContinuousCheckpointInterval)(nil),
		(*WriteStreamOperationStart_Path)(nil),
		(*WriteStreamOperationStart_TableName)(nil),
	}
	file_spark_connect_commands_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*StreamingForeachFunction_PythonFunction)(nil),
		(*StreamingForeachFunction_ScalaFunction)(nil),
	}
	file_spark_connect_commands_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*StreamingQueryCommand_Status)(nil),
		(*StreamingQueryCommand_LastProgress)(nil),
		(*StreamingQueryCommand_RecentProgress)(nil),
		(*StreamingQueryCommand_Stop)(nil),
		(*StreamingQueryCommand_ProcessAllAvailable)(nil),
		(*StreamingQueryCommand_Explain)(nil),
		(*StreamingQueryCommand_Exception)(nil),
		(*StreamingQueryCommand_AwaitTermination)(nil),
	}
	file_spark_connect_commands_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*StreamingQueryCommandResult_Status)(nil),
		(*StreamingQueryCommandResult_RecentProgress)(nil),
		(*StreamingQueryCommandResult_Explain)(nil),
		(*StreamingQueryCommandResult_Exception)(nil),
		(*StreamingQueryCommandResult_AwaitTermination)(nil),
	}
	file_spark_connect_commands_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*StreamingQueryManagerCommand_Active)(nil),
		(*StreamingQueryManagerCommand_GetQuery)(nil),
		(*StreamingQueryManagerCommand_AwaitAnyTermination)(nil),
		(*StreamingQueryManagerCommand_ResetTerminated)(nil),
		(*StreamingQueryManagerCommand_AddListener)(nil),
		(*StreamingQueryManagerCommand_RemoveListener)(nil),
		(*StreamingQueryManagerCommand_ListListeners)(nil),
	}
	file_spark_connect_commands_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*StreamingQueryManagerCommandResult_Active)(nil),
		(*StreamingQueryManagerCommandResult_Query)(nil),
		(*StreamingQueryManagerCommandResult_AwaitAnyTermination)(nil),
		(*StreamingQueryManagerCommandResult_ResetTerminated)(nil),
		(*StreamingQueryManagerCommandResult_AddListener)(nil),
		(*StreamingQueryManagerCommandResult_RemoveListener)(nil),
		(*StreamingQueryManagerCommandResult_ListListeners)(nil),
	}
	file_spark_connect_commands_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_spark_connect_commands_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_spark_connect_commands_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_spark_connect_commands_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_spark_connect_commands_proto_msgTypes[32].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spark_connect_commands_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spark_connect_commands_proto_goTypes,
		DependencyIndexes: file_spark_connect_commands_proto_depIdxs,
		EnumInfos:         file_spark_connect_commands_proto_enumTypes,
		MessageInfos:      file_spark_connect_commands_proto_msgTypes,
	}.Build()
	File_spark_connect_commands_proto = out.File
	file_spark_connect_commands_proto_rawDesc = nil
	file_spark_connect_commands_proto_goTypes = nil
	file_spark_connect_commands_proto_depIdxs = nil
}
