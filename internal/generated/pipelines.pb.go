//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: spark/connect/pipelines.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of dataset.
type DatasetType int32

const (
	// Safe default value. Should not be used.
	DatasetType_DATASET_TYPE_UNSPECIFIED DatasetType = 0
	// A materialized view dataset which is published to the catalog
	DatasetType_MATERIALIZED_VIEW DatasetType = 1
	// A table which is published to the catalog
	DatasetType_TABLE DatasetType = 2
	// A view which is not published to the catalog
	DatasetType_TEMPORARY_VIEW DatasetType = 3
)

// Enum value maps for DatasetType.
var (
	DatasetType_name = map[int32]string{
		0: "DATASET_TYPE_UNSPECIFIED",
		1: "MATERIALIZED_VIEW",
		2: "TABLE",
		3: "TEMPORARY_VIEW",
	}
	DatasetType_value = map[string]int32{
		"DATASET_TYPE_UNSPECIFIED": 0,
		"MATERIALIZED_VIEW":        1,
		"TABLE":                    2,
		"TEMPORARY_VIEW":           3,
	}
)

func (x DatasetType) Enum() *DatasetType {
	p := new(DatasetType)
	*p = x
	return p
}

func (x DatasetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetType) Descriptor() protoreflect.EnumDescriptor {
	return file_spark_connect_pipelines_proto_enumTypes[0].Descriptor()
}

func (DatasetType) Type() protoreflect.EnumType {
	return &file_spark_connect_pipelines_proto_enumTypes[0]
}

func (x DatasetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetType.Descriptor instead.
func (DatasetType) EnumDescriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{0}
}

// Dispatch object for pipelines commands. See each individual command for documentation.
type PipelineCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CommandType:
	//
	//	*PipelineCommand_CreateDataflowGraph_
	//	*PipelineCommand_DefineDataset_
	//	*PipelineCommand_DefineFlow_
	//	*PipelineCommand_DropDataflowGraph_
	//	*PipelineCommand_StartRun_
	//	*PipelineCommand_DefineSqlGraphElements
	CommandType isPipelineCommand_CommandType `protobuf_oneof:"command_type"`
}

func (x *PipelineCommand) Reset() {
	*x = PipelineCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_pipelines_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCommand) ProtoMessage() {}

func (x *PipelineCommand) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_pipelines_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCommand.ProtoReflect.Descriptor instead.
func (*PipelineCommand) Descriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{0}
}

func (m *PipelineCommand) GetCommandType() isPipelineCommand_CommandType {
	if m != nil {
		return m.CommandType
	}
	return nil
}

func (x *PipelineCommand) GetCreateDataflowGraph() *PipelineCommand_CreateDataflowGraph {
	if x, ok := x.GetCommandType().(*PipelineCommand_CreateDataflowGraph_); ok {
		return x.CreateDataflowGraph
	}
	return nil
}

func (x *PipelineCommand) GetDefineDataset() *PipelineCommand_DefineDataset {
	if x, ok := x.GetCommandType().(*PipelineCommand_DefineDataset_); ok {
		return x.DefineDataset
	}
	return nil
}

func (x *PipelineCommand) GetDefineFlow() *PipelineCommand_DefineFlow {
	if x, ok := x.GetCommandType().(*PipelineCommand_DefineFlow_); ok {
		return x.DefineFlow
	}
	return nil
}

func (x *PipelineCommand) GetDropDataflowGraph() *PipelineCommand_DropDataflowGraph {
	if x, ok := x.GetCommandType().(*PipelineCommand_DropDataflowGraph_); ok {
		return x.DropDataflowGraph
	}
	return nil
}

func (x *PipelineCommand) GetStartRun() *PipelineCommand_StartRun {
	if x, ok := x.GetCommandType().(*PipelineCommand_StartRun_); ok {
		return x.StartRun
	}
	return nil
}

func (x *PipelineCommand) GetDefineSqlGraphElements() *DefineSqlGraphElements {
	if x, ok := x.GetCommandType().(*PipelineCommand_DefineSqlGraphElements); ok {
		return x.DefineSqlGraphElements
	}
	return nil
}

type isPipelineCommand_CommandType interface {
	isPipelineCommand_CommandType()
}

type PipelineCommand_CreateDataflowGraph_ struct {
	CreateDataflowGraph *PipelineCommand_CreateDataflowGraph `protobuf:"bytes,1,opt,name=create_dataflow_graph,json=createDataflowGraph,proto3,oneof"`
}

type PipelineCommand_DefineDataset_ struct {
	DefineDataset *PipelineCommand_DefineDataset `protobuf:"bytes,2,opt,name=define_dataset,json=defineDataset,proto3,oneof"`
}

type PipelineCommand_DefineFlow_ struct {
	DefineFlow *PipelineCommand_DefineFlow `protobuf:"bytes,3,opt,name=define_flow,json=defineFlow,proto3,oneof"`
}

type PipelineCommand_DropDataflowGraph_ struct {
	DropDataflowGraph *PipelineCommand_DropDataflowGraph `protobuf:"bytes,4,opt,name=drop_dataflow_graph,json=dropDataflowGraph,proto3,oneof"`
}

type PipelineCommand_StartRun_ struct {
	StartRun *PipelineCommand_StartRun `protobuf:"bytes,5,opt,name=start_run,json=startRun,proto3,oneof"`
}

type PipelineCommand_DefineSqlGraphElements struct {
	DefineSqlGraphElements *DefineSqlGraphElements `protobuf:"bytes,6,opt,name=define_sql_graph_elements,json=defineSqlGraphElements,proto3,oneof"`
}

func (*PipelineCommand_CreateDataflowGraph_) isPipelineCommand_CommandType() {}

func (*PipelineCommand_DefineDataset_) isPipelineCommand_CommandType() {}

func (*PipelineCommand_DefineFlow_) isPipelineCommand_CommandType() {}

func (*PipelineCommand_DropDataflowGraph_) isPipelineCommand_CommandType() {}

func (*PipelineCommand_StartRun_) isPipelineCommand_CommandType() {}

func (*PipelineCommand_DefineSqlGraphElements) isPipelineCommand_CommandType() {}

// Parses the SQL file and registers all datasets and flows.
type DefineSqlGraphElements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The graph to attach this dataset to.
	DataflowGraphId *string `protobuf:"bytes,1,opt,name=dataflow_graph_id,json=dataflowGraphId,proto3,oneof" json:"dataflow_graph_id,omitempty"`
	// The full path to the SQL file. Can be relative or absolute.
	SqlFilePath *string `protobuf:"bytes,2,opt,name=sql_file_path,json=sqlFilePath,proto3,oneof" json:"sql_file_path,omitempty"`
	// The contents of the SQL file.
	SqlText *string `protobuf:"bytes,3,opt,name=sql_text,json=sqlText,proto3,oneof" json:"sql_text,omitempty"`
}

func (x *DefineSqlGraphElements) Reset() {
	*x = DefineSqlGraphElements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_pipelines_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefineSqlGraphElements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefineSqlGraphElements) ProtoMessage() {}

func (x *DefineSqlGraphElements) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_pipelines_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefineSqlGraphElements.ProtoReflect.Descriptor instead.
func (*DefineSqlGraphElements) Descriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{1}
}

func (x *DefineSqlGraphElements) GetDataflowGraphId() string {
	if x != nil && x.DataflowGraphId != nil {
		return *x.DataflowGraphId
	}
	return ""
}

func (x *DefineSqlGraphElements) GetSqlFilePath() string {
	if x != nil && x.SqlFilePath != nil {
		return *x.SqlFilePath
	}
	return ""
}

func (x *DefineSqlGraphElements) GetSqlText() string {
	if x != nil && x.SqlText != nil {
		return *x.SqlText
	}
	return ""
}

// Dispatch object for pipelines command results.
type PipelineCommandResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResultType:
	//
	//	*PipelineCommandResult_CreateDataflowGraphResult_
	ResultType isPipelineCommandResult_ResultType `protobuf_oneof:"result_type"`
}

func (x *PipelineCommandResult) Reset() {
	*x = PipelineCommandResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_pipelines_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCommandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCommandResult) ProtoMessage() {}

func (x *PipelineCommandResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_pipelines_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCommandResult.ProtoReflect.Descriptor instead.
func (*PipelineCommandResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{2}
}

func (m *PipelineCommandResult) GetResultType() isPipelineCommandResult_ResultType {
	if m != nil {
		return m.ResultType
	}
	return nil
}

func (x *PipelineCommandResult) GetCreateDataflowGraphResult() *PipelineCommandResult_CreateDataflowGraphResult {
	if x, ok := x.GetResultType().(*PipelineCommandResult_CreateDataflowGraphResult_); ok {
		return x.CreateDataflowGraphResult
	}
	return nil
}

type isPipelineCommandResult_ResultType interface {
	isPipelineCommandResult_ResultType()
}

type PipelineCommandResult_CreateDataflowGraphResult_ struct {
	CreateDataflowGraphResult *PipelineCommandResult_CreateDataflowGraphResult `protobuf:"bytes,1,opt,name=create_dataflow_graph_result,json=createDataflowGraphResult,proto3,oneof"`
}

func (*PipelineCommandResult_CreateDataflowGraphResult_) isPipelineCommandResult_ResultType() {}

// A response containing an event emitted during the run of a pipeline.
type PipelineEventResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *PipelineEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *PipelineEventResult) Reset() {
	*x = PipelineEventResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_pipelines_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineEventResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineEventResult) ProtoMessage() {}

func (x *PipelineEventResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_pipelines_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineEventResult.ProtoReflect.Descriptor instead.
func (*PipelineEventResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{3}
}

func (x *PipelineEventResult) GetEvent() *PipelineEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

// An event emitted during the run of a graph.
type PipelineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time of the event.
	Timestamp *string `protobuf:"bytes,1,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// The message that should be displayed to users.
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *PipelineEvent) Reset() {
	*x = PipelineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_pipelines_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineEvent) ProtoMessage() {}

func (x *PipelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_pipelines_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineEvent.ProtoReflect.Descriptor instead.
func (*PipelineEvent) Descriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{4}
}

func (x *PipelineEvent) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *PipelineEvent) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// Request to create a new dataflow graph.
type PipelineCommand_CreateDataflowGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default catalog.
	DefaultCatalog *string `protobuf:"bytes,1,opt,name=default_catalog,json=defaultCatalog,proto3,oneof" json:"default_catalog,omitempty"`
	// The default database.
	DefaultDatabase *string `protobuf:"bytes,2,opt,name=default_database,json=defaultDatabase,proto3,oneof" json:"default_database,omitempty"`
	// SQL configurations for all flows in this graph.
	SqlConf map[string]string `protobuf:"bytes,5,rep,name=sql_conf,json=sqlConf,proto3" json:"sql_conf,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PipelineCommand_CreateDataflowGraph) Reset() {
	*x = PipelineCommand_CreateDataflowGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_pipelines_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCommand_CreateDataflowGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCommand_CreateDataflowGraph) ProtoMessage() {}

func (x *PipelineCommand_CreateDataflowGraph) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_pipelines_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCommand_CreateDataflowGraph.ProtoReflect.Descriptor instead.
func (*PipelineCommand_CreateDataflowGraph) Descriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PipelineCommand_CreateDataflowGraph) GetDefaultCatalog() string {
	if x != nil && x.DefaultCatalog != nil {
		return *x.DefaultCatalog
	}
	return ""
}

func (x *PipelineCommand_CreateDataflowGraph) GetDefaultDatabase() string {
	if x != nil && x.DefaultDatabase != nil {
		return *x.DefaultDatabase
	}
	return ""
}

func (x *PipelineCommand_CreateDataflowGraph) GetSqlConf() map[string]string {
	if x != nil {
		return x.SqlConf
	}
	return nil
}

// Drops the graph and stops any running attached flows.
type PipelineCommand_DropDataflowGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The graph to drop.
	DataflowGraphId *string `protobuf:"bytes,1,opt,name=dataflow_graph_id,json=dataflowGraphId,proto3,oneof" json:"dataflow_graph_id,omitempty"`
}

func (x *PipelineCommand_DropDataflowGraph) Reset() {
	*x = PipelineCommand_DropDataflowGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_pipelines_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCommand_DropDataflowGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCommand_DropDataflowGraph) ProtoMessage() {}

func (x *PipelineCommand_DropDataflowGraph) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_pipelines_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCommand_DropDataflowGraph.ProtoReflect.Descriptor instead.
func (*PipelineCommand_DropDataflowGraph) Descriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PipelineCommand_DropDataflowGraph) GetDataflowGraphId() string {
	if x != nil && x.DataflowGraphId != nil {
		return *x.DataflowGraphId
	}
	return ""
}

// Request to define a dataset: a table, a materialized view, or a temporary view.
type PipelineCommand_DefineDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The graph to attach this dataset to.
	DataflowGraphId *string `protobuf:"bytes,1,opt,name=dataflow_graph_id,json=dataflowGraphId,proto3,oneof" json:"dataflow_graph_id,omitempty"`
	// Name of the dataset. Can be partially or fully qualified.
	DatasetName *string `protobuf:"bytes,2,opt,name=dataset_name,json=datasetName,proto3,oneof" json:"dataset_name,omitempty"`
	// The type of the dataset.
	DatasetType *DatasetType `protobuf:"varint,3,opt,name=dataset_type,json=datasetType,proto3,enum=spark.connect.DatasetType,oneof" json:"dataset_type,omitempty"`
	// Optional comment for the dataset.
	Comment *string `protobuf:"bytes,4,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	// Optional table properties. Only applies to dataset_type == TABLE and dataset_type == MATERIALIZED_VIEW.
	TableProperties map[string]string `protobuf:"bytes,5,rep,name=table_properties,json=tableProperties,proto3" json:"table_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional partition columns for the dataset. Only applies to dataset_type == TABLE and
	// dataset_type == MATERIALIZED_VIEW.
	PartitionCols []string `protobuf:"bytes,6,rep,name=partition_cols,json=partitionCols,proto3" json:"partition_cols,omitempty"`
	// Schema for the dataset. If unset, this will be inferred from incoming flows.
	Schema *DataType `protobuf:"bytes,7,opt,name=schema,proto3,oneof" json:"schema,omitempty"`
	// The output table format of the dataset. Only applies to dataset_type == TABLE and
	// dataset_type == MATERIALIZED_VIEW.
	Format *string `protobuf:"bytes,8,opt,name=format,proto3,oneof" json:"format,omitempty"`
}

func (x *PipelineCommand_DefineDataset) Reset() {
	*x = PipelineCommand_DefineDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_pipelines_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCommand_DefineDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCommand_DefineDataset) ProtoMessage() {}

func (x *PipelineCommand_DefineDataset) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_pipelines_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCommand_DefineDataset.ProtoReflect.Descriptor instead.
func (*PipelineCommand_DefineDataset) Descriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PipelineCommand_DefineDataset) GetDataflowGraphId() string {
	if x != nil && x.DataflowGraphId != nil {
		return *x.DataflowGraphId
	}
	return ""
}

func (x *PipelineCommand_DefineDataset) GetDatasetName() string {
	if x != nil && x.DatasetName != nil {
		return *x.DatasetName
	}
	return ""
}

func (x *PipelineCommand_DefineDataset) GetDatasetType() DatasetType {
	if x != nil && x.DatasetType != nil {
		return *x.DatasetType
	}
	return DatasetType_DATASET_TYPE_UNSPECIFIED
}

func (x *PipelineCommand_DefineDataset) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *PipelineCommand_DefineDataset) GetTableProperties() map[string]string {
	if x != nil {
		return x.TableProperties
	}
	return nil
}

func (x *PipelineCommand_DefineDataset) GetPartitionCols() []string {
	if x != nil {
		return x.PartitionCols
	}
	return nil
}

func (x *PipelineCommand_DefineDataset) GetSchema() *DataType {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *PipelineCommand_DefineDataset) GetFormat() string {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ""
}

// Request to define a flow targeting a dataset.
type PipelineCommand_DefineFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The graph to attach this flow to.
	DataflowGraphId *string `protobuf:"bytes,1,opt,name=dataflow_graph_id,json=dataflowGraphId,proto3,oneof" json:"dataflow_graph_id,omitempty"`
	// Name of the flow. For standalone flows, this must be a single-part name.
	FlowName *string `protobuf:"bytes,2,opt,name=flow_name,json=flowName,proto3,oneof" json:"flow_name,omitempty"`
	// Name of the dataset this flow writes to. Can be partially or fully qualified.
	TargetDatasetName *string `protobuf:"bytes,3,opt,name=target_dataset_name,json=targetDatasetName,proto3,oneof" json:"target_dataset_name,omitempty"`
	// An unresolved relation that defines the dataset's flow.
	Plan *Relation `protobuf:"bytes,4,opt,name=plan,proto3,oneof" json:"plan,omitempty"`
	// SQL configurations set when running this flow.
	SqlConf map[string]string `protobuf:"bytes,5,rep,name=sql_conf,json=sqlConf,proto3" json:"sql_conf,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If true, this flow will only be run once per full refresh.
	Once *bool `protobuf:"varint,6,opt,name=once,proto3,oneof" json:"once,omitempty"`
}

func (x *PipelineCommand_DefineFlow) Reset() {
	*x = PipelineCommand_DefineFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_pipelines_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCommand_DefineFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCommand_DefineFlow) ProtoMessage() {}

func (x *PipelineCommand_DefineFlow) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_pipelines_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCommand_DefineFlow.ProtoReflect.Descriptor instead.
func (*PipelineCommand_DefineFlow) Descriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PipelineCommand_DefineFlow) GetDataflowGraphId() string {
	if x != nil && x.DataflowGraphId != nil {
		return *x.DataflowGraphId
	}
	return ""
}

func (x *PipelineCommand_DefineFlow) GetFlowName() string {
	if x != nil && x.FlowName != nil {
		return *x.FlowName
	}
	return ""
}

func (x *PipelineCommand_DefineFlow) GetTargetDatasetName() string {
	if x != nil && x.TargetDatasetName != nil {
		return *x.TargetDatasetName
	}
	return ""
}

func (x *PipelineCommand_DefineFlow) GetPlan() *Relation {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *PipelineCommand_DefineFlow) GetSqlConf() map[string]string {
	if x != nil {
		return x.SqlConf
	}
	return nil
}

func (x *PipelineCommand_DefineFlow) GetOnce() bool {
	if x != nil && x.Once != nil {
		return *x.Once
	}
	return false
}

// Resolves all datasets and flows and start a pipeline update. Should be called after all
// graph elements are registered.
type PipelineCommand_StartRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The graph to start.
	DataflowGraphId *string `protobuf:"bytes,1,opt,name=dataflow_graph_id,json=dataflowGraphId,proto3,oneof" json:"dataflow_graph_id,omitempty"`
}

func (x *PipelineCommand_StartRun) Reset() {
	*x = PipelineCommand_StartRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_pipelines_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCommand_StartRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCommand_StartRun) ProtoMessage() {}

func (x *PipelineCommand_StartRun) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_pipelines_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCommand_StartRun.ProtoReflect.Descriptor instead.
func (*PipelineCommand_StartRun) Descriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PipelineCommand_StartRun) GetDataflowGraphId() string {
	if x != nil && x.DataflowGraphId != nil {
		return *x.DataflowGraphId
	}
	return ""
}

type PipelineCommand_CreateDataflowGraph_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the created graph.
	DataflowGraphId *string `protobuf:"bytes,1,opt,name=dataflow_graph_id,json=dataflowGraphId,proto3,oneof" json:"dataflow_graph_id,omitempty"`
}

func (x *PipelineCommand_CreateDataflowGraph_Response) Reset() {
	*x = PipelineCommand_CreateDataflowGraph_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_pipelines_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCommand_CreateDataflowGraph_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCommand_CreateDataflowGraph_Response) ProtoMessage() {}

func (x *PipelineCommand_CreateDataflowGraph_Response) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_pipelines_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCommand_CreateDataflowGraph_Response.ProtoReflect.Descriptor instead.
func (*PipelineCommand_CreateDataflowGraph_Response) Descriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *PipelineCommand_CreateDataflowGraph_Response) GetDataflowGraphId() string {
	if x != nil && x.DataflowGraphId != nil {
		return *x.DataflowGraphId
	}
	return ""
}

type PipelineCommandResult_CreateDataflowGraphResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the created graph.
	DataflowGraphId *string `protobuf:"bytes,1,opt,name=dataflow_graph_id,json=dataflowGraphId,proto3,oneof" json:"dataflow_graph_id,omitempty"`
}

func (x *PipelineCommandResult_CreateDataflowGraphResult) Reset() {
	*x = PipelineCommandResult_CreateDataflowGraphResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_pipelines_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineCommandResult_CreateDataflowGraphResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineCommandResult_CreateDataflowGraphResult) ProtoMessage() {}

func (x *PipelineCommandResult_CreateDataflowGraphResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_pipelines_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineCommandResult_CreateDataflowGraphResult.ProtoReflect.Descriptor instead.
func (*PipelineCommandResult_CreateDataflowGraphResult) Descriptor() ([]byte, []int) {
	return file_spark_connect_pipelines_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PipelineCommandResult_CreateDataflowGraphResult) GetDataflowGraphId() string {
	if x != nil && x.DataflowGraphId != nil {
		return *x.DataflowGraphId
	}
	return ""
}

var File_spark_connect_pipelines_proto protoreflect.FileDescriptor

var file_spark_connect_pipelines_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x1d,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x11, 0x0a, 0x0f, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x68, 0x0a, 0x15,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x48,
	0x00, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x55, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x4c, 0x0a,
	0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52,
	0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x62, 0x0a, 0x13, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x48, 0x00, 0x52, 0x11, 0x64, 0x72,
	0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x46, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x62, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x53, 0x71, 0x6c, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x87, 0x03, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x5a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x1a, 0x3a, 0x0a,
	0x0c, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x5a, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69,
	0x64, 0x1a, 0xd1, 0x04, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x6c, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0xbc, 0x03, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x51,
	0x0a, 0x08, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x17, 0x0a, 0x04, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x04, 0x52, 0x04, 0x6f, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x71,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6f, 0x6e, 0x63, 0x65, 0x1a, 0x51, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x75, 0x6e,
	0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x71,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x73, 0x71, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x07, 0x73, 0x71, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x8e, 0x02, 0x0a, 0x15, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x1c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x66, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a,
	0x62, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6c, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x49, 0x0a, 0x13, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x6b, 0x0a,
	0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x61, 0x0a, 0x0b, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54,
	0x41, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x54, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45, 0x4d,
	0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x03, 0x42, 0x36, 0x0a,
	0x1e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spark_connect_pipelines_proto_rawDescOnce sync.Once
	file_spark_connect_pipelines_proto_rawDescData = file_spark_connect_pipelines_proto_rawDesc
)

func file_spark_connect_pipelines_proto_rawDescGZIP() []byte {
	file_spark_connect_pipelines_proto_rawDescOnce.Do(func() {
		file_spark_connect_pipelines_proto_rawDescData = protoimpl.X.CompressGZIP(file_spark_connect_pipelines_proto_rawDescData)
	})
	return file_spark_connect_pipelines_proto_rawDescData
}

var file_spark_connect_pipelines_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spark_connect_pipelines_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_spark_connect_pipelines_proto_goTypes = []interface{}{
	(DatasetType)(0),                                     // 0: spark.connect.DatasetType
	(*PipelineCommand)(nil),                              // 1: spark.connect.PipelineCommand
	(*DefineSqlGraphElements)(nil),                       // 2: spark.connect.DefineSqlGraphElements
	(*PipelineCommandResult)(nil),                        // 3: spark.connect.PipelineCommandResult
	(*PipelineEventResult)(nil),                          // 4: spark.connect.PipelineEventResult
	(*PipelineEvent)(nil),                                // 5: spark.connect.PipelineEvent
	(*PipelineCommand_CreateDataflowGraph)(nil),          // 6: spark.connect.PipelineCommand.CreateDataflowGraph
	(*PipelineCommand_DropDataflowGraph)(nil),            // 7: spark.connect.PipelineCommand.DropDataflowGraph
	(*PipelineCommand_DefineDataset)(nil),                // 8: spark.connect.PipelineCommand.DefineDataset
	(*PipelineCommand_DefineFlow)(nil),                   // 9: spark.connect.PipelineCommand.DefineFlow
	(*PipelineCommand_StartRun)(nil),                     // 10: spark.connect.PipelineCommand.StartRun
	nil,                                                  // 11: spark.connect.PipelineCommand.CreateDataflowGraph.SqlConfEntry
	(*PipelineCommand_CreateDataflowGraph_Response)(nil), // 12: spark.connect.PipelineCommand.CreateDataflowGraph.Response
	nil, // 13: spark.connect.PipelineCommand.DefineDataset.TablePropertiesEntry
	nil, // 14: spark.connect.PipelineCommand.DefineFlow.SqlConfEntry
	(*PipelineCommandResult_CreateDataflowGraphResult)(nil), // 15: spark.connect.PipelineCommandResult.CreateDataflowGraphResult
	(*DataType)(nil), // 16: spark.connect.DataType
	(*Relation)(nil), // 17: spark.connect.Relation
}
var file_spark_connect_pipelines_proto_depIdxs = []int32{
	6,  // 0: spark.connect.PipelineCommand.create_dataflow_graph:type_name -> spark.connect.PipelineCommand.CreateDataflowGraph
	8,  // 1: spark.connect.PipelineCommand.define_dataset:type_name -> spark.connect.PipelineCommand.DefineDataset
	9,  // 2: spark.connect.PipelineCommand.define_flow:type_name -> spark.connect.PipelineCommand.DefineFlow
	7,  // 3: spark.connect.PipelineCommand.drop_dataflow_graph:type_name -> spark.connect.PipelineCommand.DropDataflowGraph
	10, // 4: spark.connect.PipelineCommand.start_run:type_name -> spark.connect.PipelineCommand.StartRun
	2,  // 5: spark.connect.PipelineCommand.define_sql_graph_elements:type_name -> spark.connect.DefineSqlGraphElements
	15, // 6: spark.connect.PipelineCommandResult.create_dataflow_graph_result:type_name -> spark.connect.PipelineCommandResult.CreateDataflowGraphResult
	5,  // 7: spark.connect.PipelineEventResult.event:type_name -> spark.connect.PipelineEvent
	11, // 8: spark.connect.PipelineCommand.CreateDataflowGraph.sql_conf:type_name -> spark.connect.PipelineCommand.CreateDataflowGraph.SqlConfEntry
	0,  // 9: spark.connect.PipelineCommand.DefineDataset.dataset_type:type_name -> spark.connect.DatasetType
	13, // 10: spark.connect.PipelineCommand.DefineDataset.table_properties:type_name -> spark.connect.PipelineCommand.DefineDataset.TablePropertiesEntry
	16, // 11: spark.connect.PipelineCommand.DefineDataset.schema:type_name -> spark.connect.DataType
	17, // 12: spark.connect.PipelineCommand.DefineFlow.plan:type_name -> spark.connect.Relation
	14, // 13: spark.connect.PipelineCommand.DefineFlow.sql_conf:type_name -> spark.connect.PipelineCommand.DefineFlow.SqlConfEntry
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_spark_connect_pipelines_proto_init() }
func file_spark_connect_pipelines_proto_init() {
	if File_spark_connect_pipelines_proto != nil {
		return
	}
	file_spark_connect_relations_proto_init()
	file_spark_connect_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spark_connect_pipelines_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_pipelines_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefineSqlGraphElements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_pipelines_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCommandResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_pipelines_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineEventResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_pipelines_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_pipelines_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCommand_CreateDataflowGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_pipelines_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCommand_DropDataflowGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_pipelines_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCommand_DefineDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_pipelines_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCommand_DefineFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_pipelines_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCommand_StartRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_pipelines_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCommand_CreateDataflowGraph_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_pipelines_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineCommandResult_CreateDataflowGraphResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spark_connect_pipelines_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PipelineCommand_CreateDataflowGraph_)(nil),
		(*PipelineCommand_DefineDataset_)(nil),
		(*PipelineCommand_DefineFlow_)(nil),
		(*PipelineCommand_DropDataflowGraph_)(nil),
		(*PipelineCommand_StartRun_)(nil),
		(*PipelineCommand_DefineSqlGraphElements)(nil),
	}
	file_spark_connect_pipelines_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_spark_connect_pipelines_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PipelineCommandResult_CreateDataflowGraphResult_)(nil),
	}
	file_spark_connect_pipelines_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_spark_connect_pipelines_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_spark_connect_pipelines_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_spark_connect_pipelines_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_spark_connect_pipelines_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_spark_connect_pipelines_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_spark_connect_pipelines_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_spark_connect_pipelines_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spark_connect_pipelines_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spark_connect_pipelines_proto_goTypes,
		DependencyIndexes: file_spark_connect_pipelines_proto_depIdxs,
		EnumInfos:         file_spark_connect_pipelines_proto_enumTypes,
		MessageInfos:      file_spark_connect_pipelines_proto_msgTypes,
	}.Build()
	File_spark_connect_pipelines_proto = out.File
	file_spark_connect_pipelines_proto_rawDesc = nil
	file_spark_connect_pipelines_proto_goTypes = nil
	file_spark_connect_pipelines_proto_depIdxs = nil
}
